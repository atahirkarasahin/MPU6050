
imu_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006d60  08006d60  00016d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006dd0  08006dd0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dd0  08006dd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000074  08006e4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006e4c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a557  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bcd  00000000  00000000  0002a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002cb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001421f  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008be7  00000000  00000000  000416af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c7a7  00000000  00000000  0004a296  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c84  00000000  00000000  000b6ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d48 	.word	0x08006d48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006d48 	.word	0x08006d48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c2, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 80010ca:	2332      	movs	r3, #50	; 0x32
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	22d0      	movs	r2, #208	; 0xd0
 80010da:	21ef      	movs	r1, #239	; 0xef
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <read_chip_id+0x3c>)
 80010de:	f001 fd1d 	bl	8002b1c <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b55      	cmp	r3, #85	; 0x55
 80010e6:	d001      	beq.n	80010ec <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000012c 	.word	0x2000012c

080010fc <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d81a      	bhi.n	8001148 <set_oss+0x4c>
 8001112:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <set_oss+0x1c>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001129 	.word	0x08001129
 800111c:	08001131 	.word	0x08001131
 8001120:	08001139 	.word	0x08001139
 8001124:	08001141 	.word	0x08001141
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2205      	movs	r2, #5
 800112c:	705a      	strb	r2, [r3, #1]
			break;
 800112e:	e00f      	b.n	8001150 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2208      	movs	r2, #8
 8001134:	705a      	strb	r2, [r3, #1]
			break;
 8001136:	e00b      	b.n	8001150 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	220e      	movs	r2, #14
 800113c:	705a      	strb	r2, [r3, #1]
			break;
 800113e:	e007      	b.n	8001150 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	221a      	movs	r2, #26
 8001144:	705a      	strb	r2, [r3, #1]
			break;
 8001146:	e003      	b.n	8001150 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2208      	movs	r2, #8
 800114c:	705a      	strb	r2, [r3, #1]
			break;
 800114e:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	70fb      	strb	r3, [r7, #3]
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c2, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001160:	2332      	movs	r3, #50	; 0x32
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2302      	movs	r3, #2
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	22f4      	movs	r2, #244	; 0xf4
 8001172:	21ee      	movs	r1, #238	; 0xee
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <set_oss+0x88>)
 8001176:	f001 fbd7 	bl	8002928 <HAL_I2C_Mem_Write>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000012c 	.word	0x2000012c

08001188 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	829a      	strh	r2, [r3, #20]
	uint8_t i = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c2, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80011b4:	2332      	movs	r3, #50	; 0x32
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	2316      	movs	r3, #22
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	22aa      	movs	r2, #170	; 0xaa
 80011c6:	21ef      	movs	r1, #239	; 0xef
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <read_calib_data+0xe0>)
 80011ca:	f001 fca7 	bl	8002b1c <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011d4:	e03e      	b.n	8001254 <read_calib_data+0xcc>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80011d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e0:	4413      	add	r3, r2
 80011e2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b219      	sxth	r1, r3
 80011ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011f2:	4413      	add	r3, r2
 80011f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	4403      	add	r3, r0
 8001204:	430a      	orrs	r2, r1
 8001206:	b212      	sxth	r2, r2
 8001208:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800120a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	440b      	add	r3, r1
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <read_calib_data+0xc2>
		{
			ret_val = GET_CALIB_ERR;
 8001244:	2302      	movs	r3, #2
 8001246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800124a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124e:	3301      	adds	r3, #1
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001258:	2b0b      	cmp	r3, #11
 800125a:	d9bc      	bls.n	80011d6 <read_calib_data+0x4e>
		}
	}

	return ret_val;
 800125c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001260:	4618      	mov	r0, r3
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000012c 	.word	0x2000012c

0800126c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2204      	movs	r2, #4
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fd32 	bl	8005ce4 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001280:	687c      	ldr	r4, [r7, #4]
 8001282:	f7ff ff1b 	bl	80010bc <read_chip_id>
 8001286:	4603      	mov	r3, r0
 8001288:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	687c      	ldr	r4, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff79 	bl	8001188 <read_calib_data>
 8001296:	4603      	mov	r3, r0
 8001298:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3338      	adds	r3, #56	; 0x38
 80012a0:	2102      	movs	r1, #2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff2a 	bl	80010fc <set_oss>
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}

080012b0 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 80012b6:	232e      	movs	r3, #46	; 0x2e
 80012b8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c2, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012ba:	2332      	movs	r3, #50	; 0x32
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2301      	movs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	22f4      	movs	r2, #244	; 0xf4
 80012ca:	21ee      	movs	r1, #238	; 0xee
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <get_ut+0x50>)
 80012ce:	f001 fb2b 	bl	8002928 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 80012d2:	2005      	movs	r0, #5
 80012d4:	f000 fedc 	bl	8002090 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c2, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80012d8:	2332      	movs	r3, #50	; 0x32
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2302      	movs	r3, #2
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	22f6      	movs	r2, #246	; 0xf6
 80012e8:	21ef      	movs	r1, #239	; 0xef
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <get_ut+0x50>)
 80012ec:	f001 fc16 	bl	8002b1c <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	797a      	ldrb	r2, [r7, #5]
 80012f6:	4313      	orrs	r3, r2
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000012c 	.word	0x2000012c

08001304 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fea6 	bl	8001070 <__aeabi_f2iz>
 8001324:	4602      	mov	r2, r0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	895b      	ldrh	r3, [r3, #10]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	8912      	ldrh	r2, [r2, #8]
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	13db      	asrs	r3, r3, #15
 8001336:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800133e:	02da      	lsls	r2, r3, #11
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001346:	4619      	mov	r1, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	440b      	add	r3, r1
 800134c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001350:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	441a      	add	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	3308      	adds	r3, #8
 8001362:	111b      	asrs	r3, r3, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fc69 	bl	8000c3c <__aeabi_i2f>
 800136a:	4603      	mov	r3, r0
 800136c:	490e      	ldr	r1, [pc, #56]	; (80013a8 <get_temp+0xa4>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fcb8 	bl	8000ce4 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <get_temp+0xa8>)
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff fe5a 	bl	8001034 <__aeabi_fcmple>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <get_temp+0x90>
 8001386:	490a      	ldr	r1, [pc, #40]	; (80013b0 <get_temp+0xac>)
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff fe5d 	bl	8001048 <__aeabi_fcmpge>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	3dcccccd 	.word	0x3dcccccd
 80013ac:	c2200000 	.word	0xc2200000
 80013b0:	42aa0000 	.word	0x42aa0000

080013b4 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2100      	movs	r1, #0
 80013c2:	460a      	mov	r2, r1
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	460a      	mov	r2, r1
 80013c8:	709a      	strb	r2, [r3, #2]
	long up = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80013ce:	2334      	movs	r3, #52	; 0x34
 80013d0:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c2, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80013d2:	2332      	movs	r3, #50	; 0x32
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	22f4      	movs	r2, #244	; 0xf4
 80013e4:	21ee      	movs	r1, #238	; 0xee
 80013e6:	4813      	ldr	r0, [pc, #76]	; (8001434 <get_up+0x80>)
 80013e8:	f001 fa9e 	bl	8002928 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fe4e 	bl	8002090 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c2, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80013f4:	2332      	movs	r3, #50	; 0x32
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2303      	movs	r3, #3
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	22f6      	movs	r2, #246	; 0xf6
 8001406:	21ef      	movs	r1, #239	; 0xef
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <get_up+0x80>)
 800140a:	f001 fb87 	bl	8002b1c <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800140e:	7a3b      	ldrb	r3, [r7, #8]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	7a7b      	ldrb	r3, [r7, #9]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	4413      	add	r3, r2
 8001418:	7aba      	ldrb	r2, [r7, #10]
 800141a:	441a      	add	r2, r3
 800141c:	793b      	ldrb	r3, [r7, #4]
 800141e:	f1c3 0308 	rsb	r3, r3, #8
 8001422:	fa42 f303 	asr.w	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
	return up;
 8001428:	68fb      	ldr	r3, [r7, #12]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000012c 	.word	0x2000012c

08001438 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001438:	b084      	sub	sp, #16
 800143a:	b480      	push	{r7}
 800143c:	b089      	sub	sp, #36	; 0x24
 800143e:	af00      	add	r7, sp, #0
 8001440:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001444:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001452:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001456:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001458:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800145c:	4619      	mov	r1, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	da01      	bge.n	800146e <get_pressure+0x36>
 800146a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800146e:	131b      	asrs	r3, r3, #12
 8001470:	fb03 f301 	mul.w	r3, r3, r1
 8001474:	2b00      	cmp	r3, #0
 8001476:	da01      	bge.n	800147c <get_pressure+0x44>
 8001478:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800147c:	12db      	asrs	r3, r3, #11
 800147e:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001480:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001484:	461a      	mov	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fb03 f302 	mul.w	r3, r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	da01      	bge.n	8001494 <get_pressure+0x5c>
 8001490:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001494:	12db      	asrs	r3, r3, #11
 8001496:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 80014a0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014a4:	009a      	lsls	r2, r3, #2
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80014ae:	4093      	lsls	r3, r2
 80014b0:	3302      	adds	r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da00      	bge.n	80014b8 <get_pressure+0x80>
 80014b6:	3303      	adds	r3, #3
 80014b8:	109b      	asrs	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80014bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014c0:	461a      	mov	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fb03 f302 	mul.w	r3, r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da02      	bge.n	80014d2 <get_pressure+0x9a>
 80014cc:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80014d0:	331f      	adds	r3, #31
 80014d2:	135b      	asrs	r3, r3, #13
 80014d4:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80014d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80014da:	4619      	mov	r1, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da01      	bge.n	80014ec <get_pressure+0xb4>
 80014e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ec:	131b      	asrs	r3, r3, #12
 80014ee:	fb03 f301 	mul.w	r3, r3, r1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da02      	bge.n	80014fc <get_pressure+0xc4>
 80014f6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014fa:	33ff      	adds	r3, #255	; 0xff
 80014fc:	141b      	asrs	r3, r3, #16
 80014fe:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	3302      	adds	r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	da00      	bge.n	800150e <get_pressure+0xd6>
 800150c:	3303      	adds	r3, #3
 800150e:	109b      	asrs	r3, r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800151c:	fb03 f302 	mul.w	r3, r3, r2
 8001520:	0bdb      	lsrs	r3, r3, #15
 8001522:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001530:	4611      	mov	r1, r2
 8001532:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001536:	410a      	asrs	r2, r1
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db06      	blt.n	8001552 <get_pressure+0x11a>
	{
		p = (B7 * 2) / B4;
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	005a      	lsls	r2, r3, #1
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	e005      	b.n	800155e <get_pressure+0x126>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da00      	bge.n	8001566 <get_pressure+0x12e>
 8001564:	33ff      	adds	r3, #255	; 0xff
 8001566:	121b      	asrs	r3, r3, #8
 8001568:	461a      	mov	r2, r3
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	2b00      	cmp	r3, #0
 800156e:	da00      	bge.n	8001572 <get_pressure+0x13a>
 8001570:	33ff      	adds	r3, #255	; 0xff
 8001572:	121b      	asrs	r3, r3, #8
 8001574:	fb03 f302 	mul.w	r3, r3, r2
 8001578:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	da02      	bge.n	800158e <get_pressure+0x156>
 8001588:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800158c:	33ff      	adds	r3, #255	; 0xff
 800158e:	141b      	asrs	r3, r3, #16
 8001590:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <get_pressure+0x198>)
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	da02      	bge.n	80015a4 <get_pressure+0x16c>
 800159e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015a2:	33ff      	adds	r3, #255	; 0xff
 80015a4:	141b      	asrs	r3, r3, #16
 80015a6:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da00      	bge.n	80015b8 <get_pressure+0x180>
 80015b6:	330f      	adds	r3, #15
 80015b8:	111b      	asrs	r3, r3, #4
 80015ba:	461a      	mov	r2, r3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	61fb      	str	r3, [r7, #28]

	return p;
 80015c2:	69fb      	ldr	r3, [r7, #28]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	b004      	add	sp, #16
 80015ce:	4770      	bx	lr
 80015d0:	ffffe343 	.word	0xffffe343
 80015d4:	00000000 	.word	0x00000000

080015d8 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fb26 	bl	8000c3c <__aeabi_i2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4923      	ldr	r1, [pc, #140]	; (8001680 <get_altitude+0xa8>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc29 	bl	8000e4c <__aeabi_fdiv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff0b 	bl	8000418 <__aeabi_f2d>
 8001602:	a31b      	add	r3, pc, #108	; (adr r3, 8001670 <get_altitude+0x98>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f004 fb74 	bl	8005cf4 <pow>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	461a      	mov	r2, r3
 8001612:	4623      	mov	r3, r4
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	491a      	ldr	r1, [pc, #104]	; (8001684 <get_altitude+0xac>)
 800161a:	f7fe fd9d 	bl	8000158 <__aeabi_dsub>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	a314      	add	r3, pc, #80	; (adr r3, 8001678 <get_altitude+0xa0>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ff4c 	bl	80004c8 <__aeabi_dmul>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	f7ff f9f6 	bl	8000a28 <__aeabi_d2f>
 800163c:	4603      	mov	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001640:	4911      	ldr	r1, [pc, #68]	; (8001688 <get_altitude+0xb0>)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff fcf6 	bl	8001034 <__aeabi_fcmple>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <get_altitude+0x84>
 800164e:	490f      	ldr	r1, [pc, #60]	; (800168c <get_altitude+0xb4>)
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fcf9 	bl	8001048 <__aeabi_fcmpge>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <get_altitude+0x8c>
	{
		bmp->err = GET_ALTITUDE_ERR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2205      	movs	r2, #5
 8001660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001664:	68fb      	ldr	r3, [r7, #12]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	ccd9456c 	.word	0xccd9456c
 8001674:	3fc85b95 	.word	0x3fc85b95
 8001678:	00000000 	.word	0x00000000
 800167c:	40e5a540 	.word	0x40e5a540
 8001680:	47c5e680 	.word	0x47c5e680
 8001684:	3ff00000 	.word	0x3ff00000
 8001688:	c3fa0000 	.word	0xc3fa0000
 800168c:	460ca000 	.word	0x460ca000

08001690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a23      	ldr	r2, [pc, #140]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_GPIO_Init+0xa8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_GPIO_Init+0xac>)
 800170c:	f000 ffcc 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2302      	movs	r3, #2
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4619      	mov	r1, r3
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_GPIO_Init+0xac>)
 800172a:	f000 fe63 	bl	80023f4 <HAL_GPIO_Init>

}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40011000 	.word	0x40011000

08001740 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_I2C1_Init+0x50>)
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <MX_I2C1_Init+0x54>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_I2C1_Init+0x50>)
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MX_I2C1_Init+0x58>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_I2C1_Init+0x50>)
 800175e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_I2C1_Init+0x50>)
 800177e:	f000 ffab 	bl	80026d8 <HAL_I2C_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001788:	f000 fab3 	bl	8001cf2 <Error_Handler>
  }

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200000d8 	.word	0x200000d8
 8001794:	40005400 	.word	0x40005400
 8001798:	000186a0 	.word	0x000186a0

0800179c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_I2C2_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <MX_I2C2_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_I2C2_Init+0x50>)
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <MX_I2C2_Init+0x58>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_I2C2_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_I2C2_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_I2C2_Init+0x50>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_I2C2_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_I2C2_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_I2C2_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_I2C2_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_I2C2_Init+0x50>)
 80017da:	f000 ff7d 	bl	80026d8 <HAL_I2C_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f000 fa85 	bl	8001cf2 <Error_Handler>
  }

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000012c 	.word	0x2000012c
 80017f0:	40005800 	.word	0x40005800
 80017f4:	000186a0 	.word	0x000186a0

080017f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_I2C_MspInit+0x124>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d143      	bne.n	80018a0 <HAL_I2C_MspInit+0xa8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_I2C_MspInit+0x128>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a40      	ldr	r2, [pc, #256]	; (8001920 <HAL_I2C_MspInit+0x128>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_I2C_MspInit+0x128>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4837      	ldr	r0, [pc, #220]	; (8001924 <HAL_I2C_MspInit+0x12c>)
 8001846:	f000 fdd5 	bl	80023f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_I2C_MspInit+0x130>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001860:	4a31      	ldr	r2, [pc, #196]	; (8001928 <HAL_I2C_MspInit+0x130>)
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_I2C_MspInit+0x128>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_I2C_MspInit+0x128>)
 800186c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_I2C_MspInit+0x128>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	201f      	movs	r0, #31
 8001884:	f000 fcfd 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001888:	201f      	movs	r0, #31
 800188a:	f000 fd16 	bl	80022ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2020      	movs	r0, #32
 8001894:	f000 fcf5 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001898:	2020      	movs	r0, #32
 800189a:	f000 fd0e 	bl	80022ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800189e:	e039      	b.n	8001914 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <HAL_I2C_MspInit+0x134>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d134      	bne.n	8001914 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_I2C_MspInit+0x128>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_I2C_MspInit+0x128>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_I2C_MspInit+0x128>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4813      	ldr	r0, [pc, #76]	; (8001924 <HAL_I2C_MspInit+0x12c>)
 80018d8:	f000 fd8c 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_I2C_MspInit+0x128>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_I2C_MspInit+0x128>)
 80018e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e6:	61d3      	str	r3, [r2, #28]
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_I2C_MspInit+0x128>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2021      	movs	r0, #33	; 0x21
 80018fa:	f000 fcc2 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80018fe:	2021      	movs	r0, #33	; 0x21
 8001900:	f000 fcdb 	bl	80022ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2022      	movs	r0, #34	; 0x22
 800190a:	f000 fcba 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800190e:	2022      	movs	r0, #34	; 0x22
 8001910:	f000 fcd3 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	; 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40005400 	.word	0x40005400
 8001920:	40021000 	.word	0x40021000
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40010000 	.word	0x40010000
 800192c:	40005800 	.word	0x40005800

08001930 <MPU6050_Init>:
float Ax, Ay, Az, Gx, Gy, Gz;



void MPU6050_Init (void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	9302      	str	r3, [sp, #8]
 800193c:	2301      	movs	r3, #1
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	2275      	movs	r2, #117	; 0x75
 8001948:	21d0      	movs	r1, #208	; 0xd0
 800194a:	4823      	ldr	r0, [pc, #140]	; (80019d8 <MPU6050_Init+0xa8>)
 800194c:	f001 f8e6 	bl	8002b1c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b68      	cmp	r3, #104	; 0x68
 8001954:	d13b      	bne.n	80019ce <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	2301      	movs	r3, #1
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2301      	movs	r3, #1
 800196a:	226b      	movs	r2, #107	; 0x6b
 800196c:	21d0      	movs	r1, #208	; 0xd0
 800196e:	481a      	ldr	r0, [pc, #104]	; (80019d8 <MPU6050_Init+0xa8>)
 8001970:	f000 ffda 	bl	8002928 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001974:	2307      	movs	r3, #7
 8001976:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	1dbb      	adds	r3, r7, #6
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	2219      	movs	r2, #25
 800198a:	21d0      	movs	r1, #208	; 0xd0
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <MPU6050_Init+0xa8>)
 800198e:	f000 ffcb 	bl	8002928 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2301      	movs	r3, #1
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	221c      	movs	r2, #28
 80019a8:	21d0      	movs	r1, #208	; 0xd0
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <MPU6050_Init+0xa8>)
 80019ac:	f000 ffbc 	bl	8002928 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 80019b0:	2300      	movs	r3, #0
 80019b2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80019b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	221b      	movs	r2, #27
 80019c6:	21d0      	movs	r1, #208	; 0xd0
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MPU6050_Init+0xa8>)
 80019ca:	f000 ffad 	bl	8002928 <HAL_I2C_Mem_Write>
	}

}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200000d8 	.word	0x200000d8

080019dc <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b087      	sub	sp, #28
 80019e0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2306      	movs	r3, #6
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	463b      	mov	r3, r7
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	223b      	movs	r2, #59	; 0x3b
 80019f4:	21d0      	movs	r1, #208	; 0xd0
 80019f6:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <MPU6050_Read_Accel+0xd8>)
 80019f8:	f001 f890 	bl	8002b1c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80019fc:	783b      	ldrb	r3, [r7, #0]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	787b      	ldrb	r3, [r7, #1]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <MPU6050_Read_Accel+0xdc>)
 8001a0c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <MPU6050_Read_Accel+0xe0>)
 8001a1e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001a20:	793b      	ldrb	r3, [r7, #4]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <MPU6050_Read_Accel+0xe4>)
 8001a30:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <MPU6050_Read_Accel+0xdc>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fcdb 	bl	80003f4 <__aeabi_i2d>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MPU6050_Read_Accel+0xe8>)
 8001a44:	f7fe fe6a 	bl	800071c <__aeabi_ddiv>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4621      	mov	r1, r4
 8001a50:	f7fe ffea 	bl	8000a28 <__aeabi_d2f>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MPU6050_Read_Accel+0xec>)
 8001a58:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MPU6050_Read_Accel+0xe0>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fcc7 	bl	80003f4 <__aeabi_i2d>
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MPU6050_Read_Accel+0xe8>)
 8001a6c:	f7fe fe56 	bl	800071c <__aeabi_ddiv>
 8001a70:	4603      	mov	r3, r0
 8001a72:	460c      	mov	r4, r1
 8001a74:	4618      	mov	r0, r3
 8001a76:	4621      	mov	r1, r4
 8001a78:	f7fe ffd6 	bl	8000a28 <__aeabi_d2f>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MPU6050_Read_Accel+0xf0>)
 8001a80:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MPU6050_Read_Accel+0xe4>)
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fcb3 	bl	80003f4 <__aeabi_i2d>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MPU6050_Read_Accel+0xe8>)
 8001a94:	f7fe fe42 	bl	800071c <__aeabi_ddiv>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	f7fe ffc2 	bl	8000a28 <__aeabi_d2f>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MPU6050_Read_Accel+0xf4>)
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000d8 	.word	0x200000d8
 8001ab8:	20000090 	.word	0x20000090
 8001abc:	20000092 	.word	0x20000092
 8001ac0:	20000094 	.word	0x20000094
 8001ac4:	40d00000 	.word	0x40d00000
 8001ac8:	2000018c 	.word	0x2000018c
 8001acc:	20000184 	.word	0x20000184
 8001ad0:	20000190 	.word	0x20000190
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	463b      	mov	r3, r7
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	2243      	movs	r2, #67	; 0x43
 8001af0:	21d0      	movs	r1, #208	; 0xd0
 8001af2:	4831      	ldr	r0, [pc, #196]	; (8001bb8 <MPU6050_Read_Gyro+0xe0>)
 8001af4:	f001 f812 	bl	8002b1c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001af8:	783b      	ldrb	r3, [r7, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	787b      	ldrb	r3, [r7, #1]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <MPU6050_Read_Gyro+0xe4>)
 8001b08:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001b0a:	78bb      	ldrb	r3, [r7, #2]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <MPU6050_Read_Gyro+0xe8>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001b1c:	793b      	ldrb	r3, [r7, #4]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <MPU6050_Read_Gyro+0xec>)
 8001b2c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <MPU6050_Read_Gyro+0xe4>)
 8001b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fc5d 	bl	80003f4 <__aeabi_i2d>
 8001b3a:	a31d      	add	r3, pc, #116	; (adr r3, 8001bb0 <MPU6050_Read_Gyro+0xd8>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fdec 	bl	800071c <__aeabi_ddiv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	460c      	mov	r4, r1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	f7fe ff6c 	bl	8000a28 <__aeabi_d2f>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MPU6050_Read_Gyro+0xf0>)
 8001b54:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MPU6050_Read_Gyro+0xe8>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc49 	bl	80003f4 <__aeabi_i2d>
 8001b62:	a313      	add	r3, pc, #76	; (adr r3, 8001bb0 <MPU6050_Read_Gyro+0xd8>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fdd8 	bl	800071c <__aeabi_ddiv>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	4618      	mov	r0, r3
 8001b72:	4621      	mov	r1, r4
 8001b74:	f7fe ff58 	bl	8000a28 <__aeabi_d2f>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MPU6050_Read_Gyro+0xf4>)
 8001b7c:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MPU6050_Read_Gyro+0xec>)
 8001b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fc35 	bl	80003f4 <__aeabi_i2d>
 8001b8a:	a309      	add	r3, pc, #36	; (adr r3, 8001bb0 <MPU6050_Read_Gyro+0xd8>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fdc4 	bl	800071c <__aeabi_ddiv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f7fe ff44 	bl	8000a28 <__aeabi_d2f>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MPU6050_Read_Gyro+0xf8>)
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40606000 	.word	0x40606000
 8001bb8:	200000d8 	.word	0x200000d8
 8001bbc:	20000096 	.word	0x20000096
 8001bc0:	20000098 	.word	0x20000098
 8001bc4:	2000009a 	.word	0x2000009a
 8001bc8:	20000180 	.word	0x20000180
 8001bcc:	20000188 	.word	0x20000188
 8001bd0:	20000194 	.word	0x20000194

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	b08d      	sub	sp, #52	; 0x34
 8001bd8:	af0c      	add	r7, sp, #48	; 0x30
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f000 f9f7 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f843 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f7ff fd55 	bl	8001690 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001be6:	f7ff fdab 	bl	8001740 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001bea:	f000 f94b 	bl	8001e84 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001bee:	f7ff fdd5 	bl	800179c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001bf2:	f7ff fe9d 	bl	8001930 <MPU6050_Init>
  bmp_init(&bmp);
 8001bf6:	481b      	ldr	r0, [pc, #108]	; (8001c64 <main+0x90>)
 8001bf8:	f7ff fb38 	bl	800126c <bmp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8001bfc:	f7ff feee 	bl	80019dc <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001c00:	f7ff ff6a 	bl	8001ad8 <MPU6050_Read_Gyro>
	  bmp.uncomp.temp = get_ut();
 8001c04:	f7ff fb54 	bl	80012b0 <get_ut>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f816 	bl	8000c3c <__aeabi_i2f>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <main+0x90>)
 8001c14:	619a      	str	r2, [r3, #24]
	  bmp.data.temp = get_temp(&bmp);
 8001c16:	4813      	ldr	r0, [pc, #76]	; (8001c64 <main+0x90>)
 8001c18:	f7ff fb74 	bl	8001304 <get_temp>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <main+0x90>)
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
	  bmp.uncomp.press = get_up(bmp.oss);
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <main+0x90>)
 8001c24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c26:	f7ff fbc5 	bl	80013b4 <get_up>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <main+0x90>)
 8001c2e:	61da      	str	r2, [r3, #28]
	  bmp.data.press = get_pressure(bmp);
 8001c30:	4e0c      	ldr	r6, [pc, #48]	; (8001c64 <main+0x90>)
 8001c32:	466d      	mov	r5, sp
 8001c34:	f106 0410 	add.w	r4, r6, #16
 8001c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c4c:	f7ff fbf4 	bl	8001438 <get_pressure>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <main+0x90>)
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
	  bmp.data.altitude = get_altitude(&bmp);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <main+0x90>)
 8001c58:	f7ff fcbe 	bl	80015d8 <get_altitude>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b01      	ldr	r3, [pc, #4]	; (8001c64 <main+0x90>)
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
	  MPU6050_Read_Accel();
 8001c62:	e7cb      	b.n	8001bfc <main+0x28>
 8001c64:	2000009c 	.word	0x2000009c

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b090      	sub	sp, #64	; 0x40
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	2228      	movs	r2, #40	; 0x28
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 f834 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ca6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 f873 	bl	8004d9c <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cbc:	f000 f819 	bl	8001cf2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2102      	movs	r1, #2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fade 	bl	800529c <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ce6:	f000 f804 	bl	8001cf2 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3740      	adds	r7, #64	; 0x40
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_MspInit+0x5c>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_MspInit+0x5c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6193      	str	r3, [r2, #24]
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_MspInit+0x5c>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_MspInit+0x5c>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_MspInit+0x5c>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_MspInit+0x5c>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_MspInit+0x60>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_MspInit+0x60>)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <HardFault_Handler+0x4>

08001d76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <BusFault_Handler+0x4>

08001d82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f952 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <I2C1_EV_IRQHandler+0x10>)
 8001dbe:	f001 f8e3 	bl	8002f88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000d8 	.word	0x200000d8

08001dcc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <I2C1_ER_IRQHandler+0x10>)
 8001dd2:	f001 fa3f 	bl	8003254 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000d8 	.word	0x200000d8

08001de0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <I2C2_EV_IRQHandler+0x10>)
 8001de6:	f001 f8cf 	bl	8002f88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000012c 	.word	0x2000012c

08001df4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <I2C2_ER_IRQHandler+0x10>)
 8001dfa:	f001 fa2b 	bl	8003254 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000012c 	.word	0x2000012c

08001e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART1_IRQHandler+0x10>)
 8001e0e:	f003 fc2f 	bl	8005670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000198 	.word	0x20000198

08001e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <SystemInit+0x5c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <SystemInit+0x5c>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <SystemInit+0x5c>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4911      	ldr	r1, [pc, #68]	; (8001e78 <SystemInit+0x5c>)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <SystemInit+0x60>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <SystemInit+0x5c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <SystemInit+0x5c>)
 8001e3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <SystemInit+0x5c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <SystemInit+0x5c>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <SystemInit+0x5c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <SystemInit+0x5c>)
 8001e5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <SystemInit+0x5c>)
 8001e62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SystemInit+0x64>)
 8001e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	f8ff0000 	.word	0xf8ff0000
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <MX_USART1_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	f003 fb8a 	bl	80055d4 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f7ff ff14 	bl	8001cf2 <Error_Handler>
  }

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000198 	.word	0x20000198
 8001ed4:	40013800 	.word	0x40013800

08001ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_UART_MspInit+0x9c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d139      	bne.n	8001f6c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_UART_MspInit+0xa0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_UART_MspInit+0xa0>)
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0xa0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0xa0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_UART_MspInit+0xa0>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_UART_MspInit+0xa0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480f      	ldr	r0, [pc, #60]	; (8001f7c <HAL_UART_MspInit+0xa4>)
 8001f3e:	f000 fa59 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_UART_MspInit+0xa4>)
 8001f58:	f000 fa4c 	bl	80023f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2025      	movs	r0, #37	; 0x25
 8001f62:	f000 f98e 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f66:	2025      	movs	r0, #37	; 0x25
 8001f68:	f000 f9a7 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010800 	.word	0x40010800

08001f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff ff39 	bl	8001e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f003 fe77 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fae:	f7ff fe11 	bl	8001bd4 <main>
  bx lr
 8001fb2:	4770      	bx	lr
  ldr r3, =_sidata
 8001fb4:	08006dd8 	.word	0x08006dd8
  ldr r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fbc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001fc0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001fc4:	200001dc 	.word	0x200001dc

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_Init+0x28>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_Init+0x28>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f000 f945 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f000 f808 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe8:	f7ff fe8a 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_InitTick+0x54>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x58>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f95d 	bl	80022d6 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 f925 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_InitTick+0x5c>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000000 	.word	0x20000000
 8002050:	20000008 	.word	0x20000008
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x1c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x20>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_IncTick+0x20>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000008 	.word	0x20000008
 8002078:	200001d8 	.word	0x200001d8

0800207c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b02      	ldr	r3, [pc, #8]	; (800208c <HAL_GetTick+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	200001d8 	.word	0x200001d8

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff fff0 	bl	800207c <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_Delay+0x40>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffe0 	bl	800207c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000008 	.word	0x20000008

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <__NVIC_EnableIRQ+0x34>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff90 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff2d 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff42 	bl	800211c <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5f 	bl	8002170 <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff35 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa2 	bl	8002228 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002302:	2b02      	cmp	r3, #2
 8002304:	d005      	beq.n	8002312 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2204      	movs	r2, #4
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e051      	b.n	80023b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 020e 	bic.w	r2, r2, #14
 8002320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_DMA_Abort_IT+0xd0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d029      	beq.n	8002390 <HAL_DMA_Abort_IT+0xa0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_DMA_Abort_IT+0xd4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d022      	beq.n	800238c <HAL_DMA_Abort_IT+0x9c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_DMA_Abort_IT+0xd8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01a      	beq.n	8002386 <HAL_DMA_Abort_IT+0x96>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_DMA_Abort_IT+0xdc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d012      	beq.n	8002380 <HAL_DMA_Abort_IT+0x90>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_DMA_Abort_IT+0xe0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00a      	beq.n	800237a <HAL_DMA_Abort_IT+0x8a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_DMA_Abort_IT+0xe4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d102      	bne.n	8002374 <HAL_DMA_Abort_IT+0x84>
 800236e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002372:	e00e      	b.n	8002392 <HAL_DMA_Abort_IT+0xa2>
 8002374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002378:	e00b      	b.n	8002392 <HAL_DMA_Abort_IT+0xa2>
 800237a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237e:	e008      	b.n	8002392 <HAL_DMA_Abort_IT+0xa2>
 8002380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002384:	e005      	b.n	8002392 <HAL_DMA_Abort_IT+0xa2>
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238a:	e002      	b.n	8002392 <HAL_DMA_Abort_IT+0xa2>
 800238c:	2310      	movs	r3, #16
 800238e:	e000      	b.n	8002392 <HAL_DMA_Abort_IT+0xa2>
 8002390:	2301      	movs	r3, #1
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_DMA_Abort_IT+0xe8>)
 8002394:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
    } 
  }
  return status;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020008 	.word	0x40020008
 80023c4:	4002001c 	.word	0x4002001c
 80023c8:	40020030 	.word	0x40020030
 80023cc:	40020044 	.word	0x40020044
 80023d0:	40020058 	.word	0x40020058
 80023d4:	4002006c 	.word	0x4002006c
 80023d8:	40020000 	.word	0x40020000

080023dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e127      	b.n	8002658 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002408:	2201      	movs	r2, #1
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8116 	bne.w	8002652 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b12      	cmp	r3, #18
 800242c:	d034      	beq.n	8002498 <HAL_GPIO_Init+0xa4>
 800242e:	2b12      	cmp	r3, #18
 8002430:	d80d      	bhi.n	800244e <HAL_GPIO_Init+0x5a>
 8002432:	2b02      	cmp	r3, #2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x9a>
 8002436:	2b02      	cmp	r3, #2
 8002438:	d804      	bhi.n	8002444 <HAL_GPIO_Init+0x50>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d031      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 800243e:	2b01      	cmp	r3, #1
 8002440:	d01c      	beq.n	800247c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002442:	e048      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002444:	2b03      	cmp	r3, #3
 8002446:	d043      	beq.n	80024d0 <HAL_GPIO_Init+0xdc>
 8002448:	2b11      	cmp	r3, #17
 800244a:	d01b      	beq.n	8002484 <HAL_GPIO_Init+0x90>
          break;
 800244c:	e043      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800244e:	4a89      	ldr	r2, [pc, #548]	; (8002674 <HAL_GPIO_Init+0x280>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d026      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002454:	4a87      	ldr	r2, [pc, #540]	; (8002674 <HAL_GPIO_Init+0x280>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d806      	bhi.n	8002468 <HAL_GPIO_Init+0x74>
 800245a:	4a87      	ldr	r2, [pc, #540]	; (8002678 <HAL_GPIO_Init+0x284>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d020      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002460:	4a86      	ldr	r2, [pc, #536]	; (800267c <HAL_GPIO_Init+0x288>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
          break;
 8002466:	e036      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002468:	4a85      	ldr	r2, [pc, #532]	; (8002680 <HAL_GPIO_Init+0x28c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 800246e:	4a85      	ldr	r2, [pc, #532]	; (8002684 <HAL_GPIO_Init+0x290>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d016      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002474:	4a84      	ldr	r2, [pc, #528]	; (8002688 <HAL_GPIO_Init+0x294>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e028      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e023      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01e      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e019      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e012      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e008      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2bff      	cmp	r3, #255	; 0xff
 80024da:	d801      	bhi.n	80024e0 <HAL_GPIO_Init+0xec>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	e001      	b.n	80024e4 <HAL_GPIO_Init+0xf0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2bff      	cmp	r3, #255	; 0xff
 80024ea:	d802      	bhi.n	80024f2 <HAL_GPIO_Init+0xfe>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x104>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	3b08      	subs	r3, #8
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	210f      	movs	r1, #15
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	6a39      	ldr	r1, [r7, #32]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8096 	beq.w	8002652 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002526:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_GPIO_Init+0x298>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_GPIO_Init+0x298>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6193      	str	r3, [r2, #24]
 8002532:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_GPIO_Init+0x298>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253e:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_GPIO_Init+0x29c>)
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_GPIO_Init+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x19e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_GPIO_Init+0x2a4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x19a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_GPIO_Init+0x2a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x196>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a48      	ldr	r2, [pc, #288]	; (80026a0 <HAL_GPIO_Init+0x2ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x192>
 8002582:	2303      	movs	r3, #3
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 8002586:	2304      	movs	r3, #4
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 8002592:	2300      	movs	r3, #0
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a4:	493a      	ldr	r1, [pc, #232]	; (8002690 <HAL_GPIO_Init+0x29c>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4938      	ldr	r1, [pc, #224]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4933      	ldr	r1, [pc, #204]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	492e      	ldr	r1, [pc, #184]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4929      	ldr	r1, [pc, #164]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4924      	ldr	r1, [pc, #144]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	491f      	ldr	r1, [pc, #124]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002626:	4013      	ands	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	491a      	ldr	r1, [pc, #104]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	4915      	ldr	r1, [pc, #84]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800264e:	4013      	ands	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f aed0 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 8002668:	bf00      	nop
 800266a:	372c      	adds	r7, #44	; 0x2c
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	10210000 	.word	0x10210000
 8002678:	10110000 	.word	0x10110000
 800267c:	10120000 	.word	0x10120000
 8002680:	10310000 	.word	0x10310000
 8002684:	10320000 	.word	0x10320000
 8002688:	10220000 	.word	0x10220000
 800268c:	40021000 	.word	0x40021000
 8002690:	40010000 	.word	0x40010000
 8002694:	40010800 	.word	0x40010800
 8002698:	40010c00 	.word	0x40010c00
 800269c:	40011000 	.word	0x40011000
 80026a0:	40011400 	.word	0x40011400
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e10f      	b.n	800290a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff f87a 	bl	80017f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800271c:	f002 ff14 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a7b      	ldr	r2, [pc, #492]	; (8002914 <HAL_I2C_Init+0x23c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d807      	bhi.n	800273c <HAL_I2C_Init+0x64>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_I2C_Init+0x240>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e006      	b.n	800274a <HAL_I2C_Init+0x72>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a77      	ldr	r2, [pc, #476]	; (800291c <HAL_I2C_Init+0x244>)
 8002740:	4293      	cmp	r3, r2
 8002742:	bf94      	ite	ls
 8002744:	2301      	movls	r3, #1
 8002746:	2300      	movhi	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0db      	b.n	800290a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a72      	ldr	r2, [pc, #456]	; (8002920 <HAL_I2C_Init+0x248>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a64      	ldr	r2, [pc, #400]	; (8002914 <HAL_I2C_Init+0x23c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d802      	bhi.n	800278c <HAL_I2C_Init+0xb4>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3301      	adds	r3, #1
 800278a:	e009      	b.n	80027a0 <HAL_I2C_Init+0xc8>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_I2C_Init+0x24c>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4956      	ldr	r1, [pc, #344]	; (8002914 <HAL_I2C_Init+0x23c>)
 80027bc:	428b      	cmp	r3, r1
 80027be:	d80d      	bhi.n	80027dc <HAL_I2C_Init+0x104>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e59      	subs	r1, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	bf38      	it	cc
 80027d8:	2304      	movcc	r3, #4
 80027da:	e04f      	b.n	800287c <HAL_I2C_Init+0x1a4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <HAL_I2C_Init+0x130>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e012      	b.n	800282e <HAL_I2C_Init+0x156>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x15e>
 8002832:	2301      	movs	r3, #1
 8002834:	e022      	b.n	800287c <HAL_I2C_Init+0x1a4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10e      	bne.n	800285c <HAL_I2C_Init+0x184>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e58      	subs	r0, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	440b      	add	r3, r1
 800284c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	e00f      	b.n	800287c <HAL_I2C_Init+0x1a4>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	0099      	lsls	r1, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6809      	ldr	r1, [r1, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6911      	ldr	r1, [r2, #16]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	000186a0 	.word	0x000186a0
 8002918:	001e847f 	.word	0x001e847f
 800291c:	003d08ff 	.word	0x003d08ff
 8002920:	431bde83 	.word	0x431bde83
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002942:	f7ff fb9b 	bl	800207c <HAL_GetTick>
 8002946:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	f040 80d9 	bne.w	8002b08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2319      	movs	r3, #25
 800295c:	2201      	movs	r2, #1
 800295e:	496d      	ldr	r1, [pc, #436]	; (8002b14 <HAL_I2C_Mem_Write+0x1ec>)
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f002 f824 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
 800296e:	e0cc      	b.n	8002b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_I2C_Mem_Write+0x56>
 800297a:	2302      	movs	r3, #2
 800297c:	e0c5      	b.n	8002b0a <HAL_I2C_Mem_Write+0x1e2>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d007      	beq.n	80029a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2221      	movs	r2, #33	; 0x21
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a3a      	ldr	r2, [r7, #32]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_I2C_Mem_Write+0x1f0>)
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e6:	88f8      	ldrh	r0, [r7, #6]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4603      	mov	r3, r0
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f001 fe10 	bl	800461c <I2C_RequestMemoryWrite>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d052      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e081      	b.n	8002b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f002 f8a5 	bl	8004b5a <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06b      	b.n	8002b0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_I2C_Mem_Write+0x180>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d017      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1aa      	bne.n	8002a06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f002 f891 	bl	8004bdc <I2C_WaitOnBTFFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e016      	b.n	8002b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	00100002 	.word	0x00100002
 8002b18:	ffff0000 	.word	0xffff0000

08002b1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b36:	f7ff faa1 	bl	800207c <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	f040 8218 	bne.w	8002f7a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2319      	movs	r3, #25
 8002b50:	2201      	movs	r2, #1
 8002b52:	4981      	ldr	r1, [pc, #516]	; (8002d58 <HAL_I2C_Mem_Read+0x23c>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f001 ff2a 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	e20b      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x56>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e204      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d007      	beq.n	8002b98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2222      	movs	r2, #34	; 0x22
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a61      	ldr	r2, [pc, #388]	; (8002d5c <HAL_I2C_Mem_Read+0x240>)
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bda:	88f8      	ldrh	r0, [r7, #6]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	8979      	ldrh	r1, [r7, #10]
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	4603      	mov	r3, r0
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f001 fda0 	bl	8004730 <I2C_RequestMemoryRead>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1c0      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	623b      	str	r3, [r7, #32]
 8002c16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e194      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d11d      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c40:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c42:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c6a:	b662      	cpsie	i
 8002c6c:	e172      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d11d      	bne.n	8002cb2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c86:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cae:	b662      	cpsie	i
 8002cb0:	e150      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cd8:	e13c      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f200 80f5 	bhi.w	8002ece <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d123      	bne.n	8002d34 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f001 ffb4 	bl	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e13d      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d32:	e10f      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d150      	bne.n	8002dde <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	2200      	movs	r2, #0
 8002d44:	4906      	ldr	r1, [pc, #24]	; (8002d60 <HAL_I2C_Mem_Read+0x244>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f001 fe31 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e112      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
 8002d56:	bf00      	nop
 8002d58:	00100002 	.word	0x00100002
 8002d5c:	ffff0000 	.word	0xffff0000
 8002d60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d64:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002da8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ddc:	e0ba      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	2200      	movs	r2, #0
 8002de6:	4967      	ldr	r1, [pc, #412]	; (8002f84 <HAL_I2C_Mem_Read+0x468>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f001 fde0 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0c1      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	2200      	movs	r2, #0
 8002e44:	494f      	ldr	r1, [pc, #316]	; (8002f84 <HAL_I2C_Mem_Read+0x468>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f001 fdb1 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e092      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e98:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ecc:	e042      	b.n	8002f54 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f001 fec3 	bl	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e04c      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d118      	bne.n	8002f54 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f47f aebe 	bne.w	8002cda <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	00010004 	.word	0x00010004

08002f88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d003      	beq.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x38>
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	f040 80b6 	bne.w	800312c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fe0:	d003      	beq.n	8002fea <HAL_I2C_EV_IRQHandler+0x62>
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_EV_IRQHandler+0x66>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x68>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f000 8127 	beq.w	8003244 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_I2C_EV_IRQHandler+0x92>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	0a5b      	lsrs	r3, r3, #9
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 feaa 	bl	8004d66 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fd03 	bl	8003a1e <I2C_Master_SB>
 8003018:	e087      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0xb2>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	0a5b      	lsrs	r3, r3, #9
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fd78 	bl	8003b28 <I2C_Master_ADD10>
 8003038:	e077      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0xd2>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	0a5b      	lsrs	r3, r3, #9
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fd91 	bl	8003b7a <I2C_Master_ADDR>
 8003058:	e067      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d030      	beq.n	80030c8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003074:	f000 80e8 	beq.w	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	09db      	lsrs	r3, r3, #7
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00f      	beq.n	80030a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d103      	bne.n	80030a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f9e4 	bl	800346a <I2C_MasterTransmit_TXE>
 80030a2:	e042      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80cb 	beq.w	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	0a5b      	lsrs	r3, r3, #9
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80c4 	beq.w	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 faca 	bl	800365a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c6:	e0bf      	b.n	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	f000 80b7 	beq.w	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00f      	beq.n	8003106 <HAL_I2C_EV_IRQHandler+0x17e>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	0a9b      	lsrs	r3, r3, #10
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_I2C_EV_IRQHandler+0x17e>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb21 	bl	8003746 <I2C_MasterReceive_RXNE>
 8003104:	e011      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 809a 	beq.w	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	0a5b      	lsrs	r3, r3, #9
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8093 	beq.w	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fb91 	bl	800384a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003128:	e08e      	b.n	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
 800312a:	e08d      	b.n	8003248 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e007      	b.n	800314e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d012      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x1f8>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	0a5b      	lsrs	r3, r3, #9
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ff55 	bl	8004028 <I2C_Slave_ADDR>
 800317e:	e066      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x218>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 ff89 	bl	80040b0 <I2C_Slave_STOPF>
 800319e:	e056      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	2b21      	cmp	r3, #33	; 0x21
 80031a4:	d002      	beq.n	80031ac <HAL_I2C_EV_IRQHandler+0x224>
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	2b29      	cmp	r3, #41	; 0x29
 80031aa:	d125      	bne.n	80031f8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	09db      	lsrs	r3, r3, #7
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00f      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x250>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x250>
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fe6d 	bl	8003eb0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d6:	e039      	b.n	800324c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d033      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0x2c4>
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02d      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fe9a 	bl	8003f2a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f6:	e029      	b.n	800324c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x29c>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x29c>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fea4 	bl	8003f6a <I2C_SlaveReceive_RXNE>
 8003222:	e014      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	0a5b      	lsrs	r3, r3, #9
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fed2 	bl	8003fe6 <I2C_SlaveReceive_BTF>
 8003242:	e004      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800324c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_I2C_ER_IRQHandler+0x56>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003298:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <HAL_I2C_ER_IRQHandler+0x80>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80032d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	0a9b      	lsrs	r3, r3, #10
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d041      	beq.n	8003364 <HAL_I2C_ER_IRQHandler+0x110>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03b      	beq.n	8003364 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f2:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800330a:	7efb      	ldrb	r3, [r7, #27]
 800330c:	2b20      	cmp	r3, #32
 800330e:	d112      	bne.n	8003336 <HAL_I2C_ER_IRQHandler+0xe2>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <HAL_I2C_ER_IRQHandler+0xe2>
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b21      	cmp	r3, #33	; 0x21
 800331a:	d008      	beq.n	800332e <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b29      	cmp	r3, #41	; 0x29
 8003320:	d005      	beq.n	800332e <HAL_I2C_ER_IRQHandler+0xda>
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b28      	cmp	r3, #40	; 0x28
 8003326:	d106      	bne.n	8003336 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b21      	cmp	r3, #33	; 0x21
 800332c:	d103      	bne.n	8003336 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ffee 	bl	8004310 <I2C_Slave_AF>
 8003334:	e016      	b.n	8003364 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b10      	cmp	r3, #16
 8003352:	d107      	bne.n	8003364 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003362:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x13a>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f043 0308 	orr.w	r3, r3, #8
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800338c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f001 f825 	bl	80043f0 <I2C_ITError>
  }
}
 80033a6:	bf00      	nop
 80033a8:	3728      	adds	r7, #40	; 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
 8003402:	4613      	mov	r3, r2
 8003404:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d150      	bne.n	8003532 <I2C_MasterTransmit_TXE+0xc8>
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b21      	cmp	r3, #33	; 0x21
 8003494:	d14d      	bne.n	8003532 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d01d      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0x6e>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d01a      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0x6e>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a8:	d016      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2211      	movs	r2, #17
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff6c 	bl	80033ae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d6:	e0bc      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d107      	bne.n	8003522 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff81 	bl	8003422 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003520:	e097      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff3f 	bl	80033ae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003530:	e08f      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b21      	cmp	r3, #33	; 0x21
 8003536:	d007      	beq.n	8003548 <I2C_MasterTransmit_TXE+0xde>
 8003538:	7bbb      	ldrb	r3, [r7, #14]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	f040 8089 	bne.w	8003652 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b22      	cmp	r3, #34	; 0x22
 8003544:	f040 8085 	bne.w	8003652 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003560:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003562:	e076      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d15d      	bne.n	800362c <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11d      	bne.n	80035b4 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10b      	bne.n	8003598 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	b2da      	uxtb	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003596:	e05c      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	b29b      	uxth	r3, r3
 800359e:	121b      	asrs	r3, r3, #8
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035b2:	e04e      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d10b      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035d2:	e03e      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d13a      	bne.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b22      	cmp	r3, #34	; 0x22
 80035e6:	d108      	bne.n	80035fa <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	601a      	str	r2, [r3, #0]
}
 80035f8:	e02b      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b21      	cmp	r3, #33	; 0x21
 8003604:	d125      	bne.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800362a:	e012      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003650:	e7ff      	b.n	8003652 <I2C_MasterTransmit_TXE+0x1e8>
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b21      	cmp	r3, #33	; 0x21
 8003672:	d164      	bne.n	800373e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80036a2:	e04c      	b.n	800373e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d01d      	beq.n	80036e6 <I2C_MasterTransmit_BTF+0x8c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d01a      	beq.n	80036e6 <I2C_MasterTransmit_BTF+0x8c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b6:	d016      	beq.n	80036e6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036c6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2211      	movs	r2, #17
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe65 	bl	80033ae <HAL_I2C_MasterTxCpltCallback>
}
 80036e4:	e02b      	b.n	800373e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d107      	bne.n	8003730 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff fe7a 	bl	8003422 <HAL_I2C_MemTxCpltCallback>
}
 800372e:	e006      	b.n	800373e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fe38 	bl	80033ae <HAL_I2C_MasterTxCpltCallback>
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b22      	cmp	r3, #34	; 0x22
 8003758:	d173      	bne.n	8003842 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d920      	bls.n	80037aa <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b03      	cmp	r3, #3
 8003796:	d154      	bne.n	8003842 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80037a8:	e04b      	b.n	8003842 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d047      	beq.n	8003842 <I2C_MasterReceive_RXNE+0xfc>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <I2C_MasterReceive_RXNE+0x78>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d141      	bne.n	8003842 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037dc:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d10a      	bne.n	800382e <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fe04 	bl	8003434 <HAL_I2C_MemRxCpltCallback>
}
 800382c:	e009      	b.n	8003842 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2212      	movs	r2, #18
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff fdbf 	bl	80033c0 <HAL_I2C_MasterRxCpltCallback>
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b04      	cmp	r3, #4
 8003860:	d11b      	bne.n	800389a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003898:	e0bd      	b.n	8003a16 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d129      	bne.n	80038f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d00a      	beq.n	80038d0 <I2C_MasterReceive_BTF+0x86>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d007      	beq.n	80038d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038f6:	e08e      	b.n	8003a16 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d176      	bne.n	80039f0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <I2C_MasterReceive_BTF+0xc4>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b10      	cmp	r3, #16
 800390c:	d108      	bne.n	8003920 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e019      	b.n	8003954 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b04      	cmp	r3, #4
 8003924:	d002      	beq.n	800392c <I2C_MasterReceive_BTF+0xe2>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d108      	bne.n	800393e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e00a      	b.n	8003954 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d007      	beq.n	8003954 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d10a      	bne.n	80039da <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fd2e 	bl	8003434 <HAL_I2C_MemRxCpltCallback>
}
 80039d8:	e01d      	b.n	8003a16 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2212      	movs	r2, #18
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fce9 	bl	80033c0 <HAL_I2C_MasterRxCpltCallback>
}
 80039ee:	e012      	b.n	8003a16 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d117      	bne.n	8003a62 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a4a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a4c:	e067      	b.n	8003b1e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
}
 8003a60:	e05d      	b.n	8003b1e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6a:	d133      	bne.n	8003ad4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b21      	cmp	r3, #33	; 0x21
 8003a76:	d109      	bne.n	8003a8c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e008      	b.n	8003a9e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <I2C_Master_SB+0x90>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d037      	beq.n	8003b1e <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <I2C_Master_SB+0xa4>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02d      	beq.n	8003b1e <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad0:	605a      	str	r2, [r3, #4]
}
 8003ad2:	e024      	b.n	8003b1e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10e      	bne.n	8003afa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	11db      	asrs	r3, r3, #7
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f063 030f 	orn	r3, r3, #15
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
}
 8003af8:	e011      	b.n	8003b1e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10d      	bne.n	8003b1e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	11db      	asrs	r3, r3, #7
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0306 	and.w	r3, r3, #6
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f063 030e 	orn	r3, r3, #14
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <I2C_Master_ADD10+0x24>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d011      	beq.n	8003b70 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <I2C_Master_ADD10+0x38>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b091      	sub	sp, #68	; 0x44
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b22      	cmp	r3, #34	; 0x22
 8003ba2:	f040 8174 	bne.w	8003e8e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <I2C_Master_ADDR+0x54>
 8003bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d10b      	bne.n	8003bce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	e16b      	b.n	8003ea6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11d      	bne.n	8003c12 <I2C_Master_ADDR+0x98>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bde:	d118      	bne.n	8003c12 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c04:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c10:	e149      	b.n	8003ea6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d113      	bne.n	8003c44 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e120      	b.n	8003e86 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	f040 808a 	bne.w	8003d64 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c56:	d137      	bne.n	8003cc8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c66:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c76:	d113      	bne.n	8003ca0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	e0f2      	b.n	8003e86 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e0de      	b.n	8003e86 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d02e      	beq.n	8003d2c <I2C_Master_ADDR+0x1b2>
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d02b      	beq.n	8003d2c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	2b12      	cmp	r3, #18
 8003cd8:	d102      	bne.n	8003ce0 <I2C_Master_ADDR+0x166>
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d125      	bne.n	8003d2c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d00e      	beq.n	8003d04 <I2C_Master_ADDR+0x18a>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d00b      	beq.n	8003d04 <I2C_Master_ADDR+0x18a>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d008      	beq.n	8003d04 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e007      	b.n	8003d14 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d12:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	e0ac      	b.n	8003e86 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e090      	b.n	8003e86 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d158      	bne.n	8003e20 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d021      	beq.n	8003db8 <I2C_Master_ADDR+0x23e>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d01e      	beq.n	8003db8 <I2C_Master_ADDR+0x23e>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d01b      	beq.n	8003db8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e012      	b.n	8003dde <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dec:	d14b      	bne.n	8003e86 <I2C_Master_ADDR+0x30c>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df4:	d00b      	beq.n	8003e0e <I2C_Master_ADDR+0x294>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d008      	beq.n	8003e0e <I2C_Master_ADDR+0x294>
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d005      	beq.n	8003e0e <I2C_Master_ADDR+0x294>
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d002      	beq.n	8003e0e <I2C_Master_ADDR+0x294>
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d13b      	bne.n	8003e86 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	e032      	b.n	8003e86 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e2e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3e:	d117      	bne.n	8003e70 <I2C_Master_ADDR+0x2f6>
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e46:	d00b      	beq.n	8003e60 <I2C_Master_ADDR+0x2e6>
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d008      	beq.n	8003e60 <I2C_Master_ADDR+0x2e6>
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d005      	beq.n	8003e60 <I2C_Master_ADDR+0x2e6>
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d002      	beq.n	8003e60 <I2C_Master_ADDR+0x2e6>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d107      	bne.n	8003e70 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e6e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e8c:	e00b      	b.n	8003ea6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
}
 8003ea4:	e7ff      	b.n	8003ea6 <I2C_Master_ADDR+0x32c>
 8003ea6:	bf00      	nop
 8003ea8:	3744      	adds	r7, #68	; 0x44
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02b      	beq.n	8003f22 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d114      	bne.n	8003f22 <I2C_SlaveTransmit_TXE+0x72>
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b29      	cmp	r3, #41	; 0x29
 8003efc:	d111      	bne.n	8003f22 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2221      	movs	r2, #33	; 0x21
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2228      	movs	r2, #40	; 0x28
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fa58 	bl	80033d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d011      	beq.n	8003f60 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02c      	beq.n	8003fde <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d114      	bne.n	8003fde <I2C_SlaveReceive_RXNE+0x74>
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d111      	bne.n	8003fde <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2222      	movs	r2, #34	; 0x22
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2228      	movs	r2, #40	; 0x28
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fa03 	bl	80033e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004042:	2b28      	cmp	r3, #40	; 0x28
 8004044:	d127      	bne.n	8004096 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004054:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	09db      	lsrs	r3, r3, #7
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	81bb      	strh	r3, [r7, #12]
 8004078:	e002      	b.n	8004080 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004088:	89ba      	ldrh	r2, [r7, #12]
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff f9b1 	bl	80033f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004094:	e008      	b.n	80040a8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0202 	mvn.w	r2, #2
 800409e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410c:	d172      	bne.n	80041f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b22      	cmp	r3, #34	; 0x22
 8004112:	d002      	beq.n	800411a <I2C_Slave_STOPF+0x6a>
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b2a      	cmp	r3, #42	; 0x2a
 8004118:	d135      	bne.n	8004186 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe f942 	bl	80023dc <HAL_DMA_GetState>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d049      	beq.n	80041f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	4a69      	ldr	r2, [pc, #420]	; (8004308 <I2C_Slave_STOPF+0x258>)
 8004164:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe f8c0 	bl	80022f0 <HAL_DMA_Abort_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d03d      	beq.n	80041f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004180:	4610      	mov	r0, r2
 8004182:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004184:	e035      	b.n	80041f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe f90c 	bl	80023dc <HAL_DMA_GetState>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d014      	beq.n	80041f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	4a4e      	ldr	r2, [pc, #312]	; (8004308 <I2C_Slave_STOPF+0x258>)
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f88a 	bl	80022f0 <HAL_DMA_Abort_IT>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ec:	4610      	mov	r0, r2
 80041ee:	4798      	blx	r3
 80041f0:	e000      	b.n	80041f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d03e      	beq.n	800427c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d112      	bne.n	8004232 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d112      	bne.n	8004266 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8b3 	bl	80043f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800428a:	e039      	b.n	8004300 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b2a      	cmp	r3, #42	; 0x2a
 8004290:	d109      	bne.n	80042a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2228      	movs	r2, #40	; 0x28
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff f89f 	bl	80033e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b28      	cmp	r3, #40	; 0x28
 80042b0:	d111      	bne.n	80042d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a15      	ldr	r2, [pc, #84]	; (800430c <I2C_Slave_STOPF+0x25c>)
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff f89e 	bl	8003410 <HAL_I2C_ListenCpltCallback>
}
 80042d4:	e014      	b.n	8004300 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	2b22      	cmp	r3, #34	; 0x22
 80042dc:	d002      	beq.n	80042e4 <I2C_Slave_STOPF+0x234>
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	d10d      	bne.n	8004300 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff f872 	bl	80033e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	080048d1 	.word	0x080048d1
 800430c:	ffff0000 	.word	0xffff0000

08004310 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d002      	beq.n	8004332 <I2C_Slave_AF+0x22>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b20      	cmp	r3, #32
 8004330:	d129      	bne.n	8004386 <I2C_Slave_AF+0x76>
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b28      	cmp	r3, #40	; 0x28
 8004336:	d126      	bne.n	8004386 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <I2C_Slave_AF+0xdc>)
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800434c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004356:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff f846 	bl	8003410 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004384:	e02e      	b.n	80043e4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d126      	bne.n	80043da <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a17      	ldr	r2, [pc, #92]	; (80043ec <I2C_Slave_AF+0xdc>)
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2221      	movs	r2, #33	; 0x21
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fe fffd 	bl	80033d2 <HAL_I2C_SlaveTxCpltCallback>
}
 80043d8:	e004      	b.n	80043e4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e2:	615a      	str	r2, [r3, #20]
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b10      	cmp	r3, #16
 800440a:	d10a      	bne.n	8004422 <I2C_ITError+0x32>
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b22      	cmp	r3, #34	; 0x22
 8004410:	d107      	bne.n	8004422 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004420:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004428:	2b28      	cmp	r3, #40	; 0x28
 800442a:	d107      	bne.n	800443c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2228      	movs	r2, #40	; 0x28
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800443a:	e015      	b.n	8004468 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444a:	d006      	beq.n	800445a <I2C_ITError+0x6a>
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b60      	cmp	r3, #96	; 0x60
 8004450:	d003      	beq.n	800445a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	d161      	bne.n	800453c <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004490:	2b01      	cmp	r3, #1
 8004492:	d020      	beq.n	80044d6 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	4a5e      	ldr	r2, [pc, #376]	; (8004614 <I2C_ITError+0x224>)
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd ff25 	bl	80022f0 <HAL_DMA_Abort_IT>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8089 	beq.w	80045c0 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
 80044d4:	e074      	b.n	80045c0 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	4a4e      	ldr	r2, [pc, #312]	; (8004614 <I2C_ITError+0x224>)
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd ff04 	bl	80022f0 <HAL_DMA_Abort_IT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d068      	beq.n	80045c0 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d10b      	bne.n	8004514 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004536:	4610      	mov	r0, r2
 8004538:	4798      	blx	r3
 800453a:	e041      	b.n	80045c0 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d125      	bne.n	8004594 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d10b      	bne.n	800457c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fe ff63 	bl	8003458 <HAL_I2C_AbortCpltCallback>
 8004592:	e015      	b.n	80045c0 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d10b      	bne.n	80045ba <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fe ff43 	bl	8003446 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11b      	bne.n	800460c <I2C_ITError+0x21c>
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b28      	cmp	r3, #40	; 0x28
 80045d8:	d118      	bne.n	800460c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045e8:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <I2C_ITError+0x228>)
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe ff02 	bl	8003410 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	080048d1 	.word	0x080048d1
 8004618:	ffff0000 	.word	0xffff0000

0800461c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	461a      	mov	r2, r3
 800462a:	4603      	mov	r3, r0
 800462c:	817b      	strh	r3, [r7, #10]
 800462e:	460b      	mov	r3, r1
 8004630:	813b      	strh	r3, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2200      	movs	r2, #0
 800464e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f9ab 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e05f      	b.n	8004722 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	492d      	ldr	r1, [pc, #180]	; (800472c <I2C_RequestMemoryWrite+0x110>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f9ef 	bl	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e04c      	b.n	8004722 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a0:	6a39      	ldr	r1, [r7, #32]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fa59 	bl	8004b5a <I2C_WaitOnTXEFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d107      	bne.n	80046c6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e02b      	b.n	8004722 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046d0:	893b      	ldrh	r3, [r7, #8]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]
 80046da:	e021      	b.n	8004720 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ec:	6a39      	ldr	r1, [r7, #32]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa33 	bl	8004b5a <I2C_WaitOnTXEFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d107      	bne.n	8004712 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e005      	b.n	8004722 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004716:	893b      	ldrh	r3, [r7, #8]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	00010002 	.word	0x00010002

08004730 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	817b      	strh	r3, [r7, #10]
 8004742:	460b      	mov	r3, r1
 8004744:	813b      	strh	r3, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004758:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2200      	movs	r2, #0
 8004772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f919 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e09e      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004794:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	494c      	ldr	r1, [pc, #304]	; (80048cc <I2C_RequestMemoryRead+0x19c>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f95d 	bl	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e08b      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	6a39      	ldr	r1, [r7, #32]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f9c7 	bl	8004b5a <I2C_WaitOnTXEFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d107      	bne.n	80047ea <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06a      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047f4:	893b      	ldrh	r3, [r7, #8]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]
 80047fe:	e021      	b.n	8004844 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004800:	893b      	ldrh	r3, [r7, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	b29b      	uxth	r3, r3
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	6a39      	ldr	r1, [r7, #32]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f9a1 	bl	8004b5a <I2C_WaitOnTXEFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b04      	cmp	r3, #4
 8004824:	d107      	bne.n	8004836 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004834:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e044      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800483a:	893b      	ldrh	r3, [r7, #8]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	6a39      	ldr	r1, [r7, #32]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f986 	bl	8004b5a <I2C_WaitOnTXEFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b04      	cmp	r3, #4
 800485a:	d107      	bne.n	800486c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e029      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2200      	movs	r2, #0
 8004888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f88e 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e013      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	6a3a      	ldr	r2, [r7, #32]
 80048b0:	4906      	ldr	r1, [pc, #24]	; (80048cc <I2C_RequestMemoryRead+0x19c>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f8d2 	bl	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	00010002 	.word	0x00010002

080048d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	2200      	movs	r2, #0
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	2200      	movs	r2, #0
 8004912:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	2200      	movs	r2, #0
 800491a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b60      	cmp	r3, #96	; 0x60
 8004936:	d10e      	bne.n	8004956 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7fe fd82 	bl	8003458 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004954:	e027      	b.n	80049a6 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004956:	7afb      	ldrb	r3, [r7, #11]
 8004958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800495c:	2b28      	cmp	r3, #40	; 0x28
 800495e:	d117      	bne.n	8004990 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800497e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2228      	movs	r2, #40	; 0x28
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800498e:	e007      	b.n	80049a0 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7fe fd50 	bl	8003446 <HAL_I2C_ErrorCallback>
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049be:	e025      	b.n	8004a0c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d021      	beq.n	8004a0c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7fd fb58 	bl	800207c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <I2C_WaitOnFlagUntilTimeout+0x30>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d116      	bne.n	8004a0c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e023      	b.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d10d      	bne.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	43da      	mvns	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4013      	ands	r3, r2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	e00c      	b.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d0b6      	beq.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a6a:	e051      	b.n	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d123      	bne.n	8004ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f043 0204 	orr.w	r2, r3, #4
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e046      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d021      	beq.n	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fd fad6 	bl	800207c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d116      	bne.n	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e020      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d10c      	bne.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e00b      	b.n	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d18d      	bne.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b66:	e02d      	b.n	8004bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f8ce 	bl	8004d0a <I2C_IsAcknowledgeFailed>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e02d      	b.n	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d021      	beq.n	8004bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b80:	f7fd fa7c 	bl	800207c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d116      	bne.n	8004bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f043 0220 	orr.w	r2, r3, #32
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e007      	b.n	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d1ca      	bne.n	8004b68 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004be8:	e02d      	b.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f88d 	bl	8004d0a <I2C_IsAcknowledgeFailed>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e02d      	b.n	8004c56 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d021      	beq.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fd fa3b 	bl	800207c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d116      	bne.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e007      	b.n	8004c56 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d1ca      	bne.n	8004bea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c6a:	e042      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d119      	bne.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f06f 0210 	mvn.w	r2, #16
 8004c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e029      	b.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fd f9e5 	bl	800207c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d116      	bne.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e007      	b.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d1b5      	bne.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d11b      	bne.n	8004d5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d76:	d103      	bne.n	8004d80 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d7e:	e007      	b.n	8004d90 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d88:	d102      	bne.n	8004d90 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e26c      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8087 	beq.w	8004eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dbc:	4b92      	ldr	r3, [pc, #584]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d00c      	beq.n	8004de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dc8:	4b8f      	ldr	r3, [pc, #572]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d112      	bne.n	8004dfa <HAL_RCC_OscConfig+0x5e>
 8004dd4:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d10b      	bne.n	8004dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de2:	4b89      	ldr	r3, [pc, #548]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d06c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x12c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d168      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e246      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x76>
 8004e04:	4b80      	ldr	r3, [pc, #512]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a7f      	ldr	r2, [pc, #508]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e02e      	b.n	8004e70 <HAL_RCC_OscConfig+0xd4>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x98>
 8004e1a:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7a      	ldr	r2, [pc, #488]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b78      	ldr	r3, [pc, #480]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a77      	ldr	r2, [pc, #476]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e01d      	b.n	8004e70 <HAL_RCC_OscConfig+0xd4>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCC_OscConfig+0xbc>
 8004e3e:	4b72      	ldr	r3, [pc, #456]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a71      	ldr	r2, [pc, #452]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4b6f      	ldr	r3, [pc, #444]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6e      	ldr	r2, [pc, #440]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e00b      	b.n	8004e70 <HAL_RCC_OscConfig+0xd4>
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6a      	ldr	r2, [pc, #424]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b68      	ldr	r3, [pc, #416]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a67      	ldr	r2, [pc, #412]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d013      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd f900 	bl	800207c <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e80:	f7fd f8fc 	bl	800207c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1fa      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b5d      	ldr	r3, [pc, #372]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0xe4>
 8004e9e:	e014      	b.n	8004eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd f8ec 	bl	800207c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fd f8e8 	bl	800207c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e1e6      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	4b53      	ldr	r3, [pc, #332]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x10c>
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d063      	beq.n	8004f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ee2:	4b49      	ldr	r3, [pc, #292]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d11c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x18c>
 8004eee:	4b46      	ldr	r3, [pc, #280]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d116      	bne.n	8004f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efa:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_RCC_OscConfig+0x176>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e1ba      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f12:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4939      	ldr	r1, [pc, #228]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	e03a      	b.n	8004f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d020      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_RCC_OscConfig+0x270>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fd f8a1 	bl	800207c <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3e:	f7fd f89d 	bl	800207c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e19b      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f50:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4927      	ldr	r1, [pc, #156]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	600b      	str	r3, [r1, #0]
 8004f70:	e015      	b.n	8004f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <HAL_RCC_OscConfig+0x270>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fd f880 	bl	800207c <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f80:	f7fd f87c 	bl	800207c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e17a      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d03a      	beq.n	8005020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d019      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb8:	f7fd f860 	bl	800207c <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc0:	f7fd f85c 	bl	800207c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e15a      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f000 fada 	bl	8005598 <RCC_Delay>
 8004fe4:	e01c      	b.n	8005020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fd f846 	bl	800207c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff2:	e00f      	b.n	8005014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fd f842 	bl	800207c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d908      	bls.n	8005014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e140      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	42420000 	.word	0x42420000
 8005010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	4b9e      	ldr	r3, [pc, #632]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e9      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a6 	beq.w	800517a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005032:	4b97      	ldr	r3, [pc, #604]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10d      	bne.n	800505a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503e:	4b94      	ldr	r3, [pc, #592]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4a93      	ldr	r2, [pc, #588]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005048:	61d3      	str	r3, [r2, #28]
 800504a:	4b91      	ldr	r3, [pc, #580]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505a:	4b8e      	ldr	r3, [pc, #568]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d118      	bne.n	8005098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005066:	4b8b      	ldr	r3, [pc, #556]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a8a      	ldr	r2, [pc, #552]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005072:	f7fd f803 	bl	800207c <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507a:	f7fc ffff 	bl	800207c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b64      	cmp	r3, #100	; 0x64
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0fd      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	4b81      	ldr	r3, [pc, #516]	; (8005294 <HAL_RCC_OscConfig+0x4f8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x312>
 80050a0:	4b7b      	ldr	r3, [pc, #492]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	4a7a      	ldr	r2, [pc, #488]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	6213      	str	r3, [r2, #32]
 80050ac:	e02d      	b.n	800510a <HAL_RCC_OscConfig+0x36e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x334>
 80050b6:	4b76      	ldr	r3, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4a75      	ldr	r2, [pc, #468]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6213      	str	r3, [r2, #32]
 80050c2:	4b73      	ldr	r3, [pc, #460]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4a72      	ldr	r2, [pc, #456]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6213      	str	r3, [r2, #32]
 80050ce:	e01c      	b.n	800510a <HAL_RCC_OscConfig+0x36e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x356>
 80050d8:	4b6d      	ldr	r3, [pc, #436]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	4a6c      	ldr	r2, [pc, #432]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	6213      	str	r3, [r2, #32]
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	4a69      	ldr	r2, [pc, #420]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6213      	str	r3, [r2, #32]
 80050f0:	e00b      	b.n	800510a <HAL_RCC_OscConfig+0x36e>
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	4a66      	ldr	r2, [pc, #408]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6213      	str	r3, [r2, #32]
 80050fe:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4a63      	ldr	r2, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005112:	f7fc ffb3 	bl	800207c <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fc ffaf 	bl	800207c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0ab      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b57      	ldr	r3, [pc, #348]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCC_OscConfig+0x37e>
 800513c:	e014      	b.n	8005168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fc ff9d 	bl	800207c <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	e00a      	b.n	800515c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fc ff99 	bl	800207c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e095      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ee      	bne.n	8005146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516e:	4b48      	ldr	r3, [pc, #288]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4a47      	ldr	r2, [pc, #284]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8081 	beq.w	8005286 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005184:	4b42      	ldr	r3, [pc, #264]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d061      	beq.n	8005254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d146      	bne.n	8005226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <HAL_RCC_OscConfig+0x4fc>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fc ff6d 	bl	800207c <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fc ff69 	bl	800207c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e067      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b8:	4b35      	ldr	r3, [pc, #212]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d108      	bne.n	80051e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ce:	4b30      	ldr	r3, [pc, #192]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	492d      	ldr	r1, [pc, #180]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a19      	ldr	r1, [r3, #32]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	430b      	orrs	r3, r1
 80051f2:	4927      	ldr	r1, [pc, #156]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f8:	4b27      	ldr	r3, [pc, #156]	; (8005298 <HAL_RCC_OscConfig+0x4fc>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fc ff3d 	bl	800207c <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005206:	f7fc ff39 	bl	800207c <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e037      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x46a>
 8005224:	e02f      	b.n	8005286 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <HAL_RCC_OscConfig+0x4fc>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fc ff26 	bl	800207c <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005234:	f7fc ff22 	bl	800207c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e020      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x498>
 8005252:	e018      	b.n	8005286 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e013      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCC_OscConfig+0x4f4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	429a      	cmp	r2, r3
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	40007000 	.word	0x40007000
 8005298:	42420060 	.word	0x42420060

0800529c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0d0      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b6a      	ldr	r3, [pc, #424]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d910      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b67      	ldr	r3, [pc, #412]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	4965      	ldr	r1, [pc, #404]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800531a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d040      	beq.n	80053bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d115      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b41      	ldr	r3, [pc, #260]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e073      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e06b      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4936      	ldr	r1, [pc, #216]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fc fe76 	bl	800207c <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fc fe72 	bl	800207c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e053      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b27      	ldr	r3, [pc, #156]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d210      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 0207 	bic.w	r2, r3, #7
 80053d2:	4922      	ldr	r1, [pc, #136]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f821 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800542e:	4601      	mov	r1, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	5cd3      	ldrb	r3, [r2, r3]
 800543e:	fa21 f303 	lsr.w	r3, r1, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x1cc>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_ClockConfig+0x1d0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc fdd4 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40022000 	.word	0x40022000
 8005460:	40021000 	.word	0x40021000
 8005464:	08006d74 	.word	0x08006d74
 8005468:	20000000 	.word	0x20000000
 800546c:	20000004 	.word	0x20000004

08005470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	b490      	push	{r4, r7}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005476:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005478:	1d3c      	adds	r4, r7, #4
 800547a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800547c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	2300      	movs	r3, #0
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d002      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x40>
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d003      	beq.n	80054b6 <HAL_RCC_GetSysClockFreq+0x46>
 80054ae:	e02d      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054b0:	4b1e      	ldr	r3, [pc, #120]	; (800552c <HAL_RCC_GetSysClockFreq+0xbc>)
 80054b2:	623b      	str	r3, [r7, #32]
      break;
 80054b4:	e02d      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	0c9b      	lsrs	r3, r3, #18
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054c2:	4413      	add	r3, r2
 80054c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d013      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	0c5b      	lsrs	r3, r3, #17
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054e2:	4413      	add	r3, r2
 80054e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	4a0f      	ldr	r2, [pc, #60]	; (800552c <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ee:	fb02 f203 	mul.w	r2, r2, r3
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	e004      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4a0c      	ldr	r2, [pc, #48]	; (8005530 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005500:	fb02 f303 	mul.w	r3, r2, r3
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	623b      	str	r3, [r7, #32]
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b07      	ldr	r3, [pc, #28]	; (800552c <HAL_RCC_GetSysClockFreq+0xbc>)
 800550e:	623b      	str	r3, [r7, #32]
      break;
 8005510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005512:	6a3b      	ldr	r3, [r7, #32]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3728      	adds	r7, #40	; 0x28
 8005518:	46bd      	mov	sp, r7
 800551a:	bc90      	pop	{r4, r7}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	08006d60 	.word	0x08006d60
 8005524:	08006d70 	.word	0x08006d70
 8005528:	40021000 	.word	0x40021000
 800552c:	007a1200 	.word	0x007a1200
 8005530:	003d0900 	.word	0x003d0900

08005534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <HAL_RCC_GetHCLKFreq+0x10>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	20000000 	.word	0x20000000

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800554c:	f7ff fff2 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005550:	4601      	mov	r1, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4a03      	ldr	r2, [pc, #12]	; (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000
 800556c:	08006d84 	.word	0x08006d84

08005570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005574:	f7ff ffde 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005578:	4601      	mov	r1, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	0adb      	lsrs	r3, r3, #11
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4a03      	ldr	r2, [pc, #12]	; (8005594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40021000 	.word	0x40021000
 8005594:	08006d84 	.word	0x08006d84

08005598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <RCC_Delay+0x34>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <RCC_Delay+0x38>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	0a5b      	lsrs	r3, r3, #9
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055b4:	bf00      	nop
  }
  while (Delay --);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1e5a      	subs	r2, r3, #1
 80055ba:	60fa      	str	r2, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f9      	bne.n	80055b4 <RCC_Delay+0x1c>
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000000 	.word	0x20000000
 80055d0:	10624dd3 	.word	0x10624dd3

080055d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e03f      	b.n	8005666 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc fc6c 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa5f 	bl	8005adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800564c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_UART_IRQHandler+0x52>
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f98d 	bl	80059da <UART_Receive_IT>
      return;
 80056c0:	e0cc      	b.n	800585c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80ab 	beq.w	8005820 <HAL_UART_IRQHandler+0x1b0>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d105      	bne.n	80056e0 <HAL_UART_IRQHandler+0x70>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80a0 	beq.w	8005820 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_UART_IRQHandler+0x90>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	f043 0201 	orr.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_UART_IRQHandler+0xb0>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	f043 0202 	orr.w	r2, r3, #2
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_UART_IRQHandler+0xd0>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	f043 0204 	orr.w	r2, r3, #4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_UART_IRQHandler+0xf0>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005758:	f043 0208 	orr.w	r2, r3, #8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d078      	beq.n	800585a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <HAL_UART_IRQHandler+0x112>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f92c 	bl	80059da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <HAL_UART_IRQHandler+0x13a>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d031      	beq.n	800580e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f877 	bl	800589e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d023      	beq.n	8005806 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d013      	beq.n	80057fe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	4a22      	ldr	r2, [pc, #136]	; (8005864 <HAL_UART_IRQHandler+0x1f4>)
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fc fd84 	bl	80022f0 <HAL_DMA_Abort_IT>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057f8:	4610      	mov	r0, r2
 80057fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	e00e      	b.n	800581c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f844 	bl	800588c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	e00a      	b.n	800581c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f840 	bl	800588c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	e006      	b.n	800581c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f83c 	bl	800588c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800581a:	e01e      	b.n	800585a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	bf00      	nop
    return;
 800581e:	e01c      	b.n	800585a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_UART_IRQHandler+0x1cc>
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f863 	bl	8005900 <UART_Transmit_IT>
    return;
 800583a:	e00f      	b.n	800585c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_UART_IRQHandler+0x1ec>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8aa 	bl	80059aa <UART_EndTransmit_IT>
    return;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <HAL_UART_IRQHandler+0x1ec>
    return;
 800585a:	bf00      	nop
  }
}
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	080058d9 	.word	0x080058d9

08005868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff ffca 	bl	800588c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b21      	cmp	r3, #33	; 0x21
 8005912:	d144      	bne.n	800599e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591c:	d11a      	bne.n	8005954 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005932:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]
 8005946:	e00e      	b.n	8005966 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]
 8005952:	e008      	b.n	8005966 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	1c59      	adds	r1, r3, #1
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6211      	str	r1, [r2, #32]
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29b      	uxth	r3, r3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4619      	mov	r1, r3
 8005974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff ff4c 	bl	8005868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b22      	cmp	r3, #34	; 0x22
 80059ec:	d171      	bne.n	8005ad2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d123      	bne.n	8005a40 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10e      	bne.n	8005a24 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	1c9a      	adds	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28
 8005a22:	e029      	b.n	8005a78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
 8005a3e:	e01b      	b.n	8005a78 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6858      	ldr	r0, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6291      	str	r1, [r2, #40]	; 0x28
 8005a58:	b2c2      	uxtb	r2, r0
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e00c      	b.n	8005a78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	1c58      	adds	r0, r3, #1
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	6288      	str	r0, [r1, #40]	; 0x28
 8005a70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4619      	mov	r1, r3
 8005a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d120      	bne.n	8005ace <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0220 	bic.w	r2, r2, #32
 8005a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fed8 	bl	800587a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e002      	b.n	8005ad4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b16:	f023 030c 	bic.w	r3, r3, #12
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a52      	ldr	r2, [pc, #328]	; (8005c88 <UART_SetConfig+0x1ac>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d14e      	bne.n	8005be2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7ff fd14 	bl	8005570 <HAL_RCC_GetPCLK2Freq>
 8005b48:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009a      	lsls	r2, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	4a4a      	ldr	r2, [pc, #296]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	0119      	lsls	r1, r3, #4
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009a      	lsls	r2, r3, #2
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b80:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005b82:	fba3 0302 	umull	r0, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2064      	movs	r0, #100	; 0x64
 8005b8a:	fb00 f303 	mul.w	r3, r0, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	; 0x32
 8005b94:	4a3d      	ldr	r2, [pc, #244]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba0:	4419      	add	r1, r3
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb8:	4b34      	ldr	r3, [pc, #208]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005bba:	fba3 0302 	umull	r0, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2064      	movs	r0, #100	; 0x64
 8005bc2:	fb00 f303 	mul.w	r3, r0, r3
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	440a      	add	r2, r1
 8005bde:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005be0:	e04d      	b.n	8005c7e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005be2:	f7ff fcb1 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 8005be6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009a      	lsls	r2, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	0119      	lsls	r1, r3, #4
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009a      	lsls	r2, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005c20:	fba3 0302 	umull	r0, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	2064      	movs	r0, #100	; 0x64
 8005c28:	fb00 f303 	mul.w	r3, r0, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	3332      	adds	r3, #50	; 0x32
 8005c32:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3e:	4419      	add	r1, r3
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009a      	lsls	r2, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c56:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005c58:	fba3 0302 	umull	r0, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2064      	movs	r0, #100	; 0x64
 8005c60:	fb00 f303 	mul.w	r3, r0, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <UART_SetConfig+0x1b0>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 020f 	and.w	r2, r3, #15
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40013800 	.word	0x40013800
 8005c8c:	51eb851f 	.word	0x51eb851f

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	2000000c 	.word	0x2000000c

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	2500      	movs	r5, #0
 8005ca0:	4e0c      	ldr	r6, [pc, #48]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca2:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca4:	1ba4      	subs	r4, r4, r6
 8005ca6:	10a4      	asrs	r4, r4, #2
 8005ca8:	42a5      	cmp	r5, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	f001 f84c 	bl	8006d48 <_init>
 8005cb0:	2500      	movs	r5, #0
 8005cb2:	4e0a      	ldr	r6, [pc, #40]	; (8005cdc <__libc_init_array+0x40>)
 8005cb4:	4c0a      	ldr	r4, [pc, #40]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb6:	1ba4      	subs	r4, r4, r6
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	42a5      	cmp	r5, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cc4:	4798      	blx	r3
 8005cc6:	3501      	adds	r5, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cce:	4798      	blx	r3
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08006dd0 	.word	0x08006dd0
 8005cd8:	08006dd0 	.word	0x08006dd0
 8005cdc:	08006dd0 	.word	0x08006dd0
 8005ce0:	08006dd4 	.word	0x08006dd4

08005ce4 <memset>:
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4402      	add	r2, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <pow>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	b08f      	sub	sp, #60	; 0x3c
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4689      	mov	r9, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	f000 f955 	bl	8005fb0 <__ieee754_pow>
 8005d06:	4fa1      	ldr	r7, [pc, #644]	; (8005f8c <pow+0x298>)
 8005d08:	e9cd 0100 	strd	r0, r1, [sp]
 8005d0c:	f997 3000 	ldrsb.w	r3, [r7]
 8005d10:	463e      	mov	r6, r7
 8005d12:	9302      	str	r3, [sp, #8]
 8005d14:	3301      	adds	r3, #1
 8005d16:	d05f      	beq.n	8005dd8 <pow+0xe4>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa fe6c 	bl	80009fc <__aeabi_dcmpun>
 8005d24:	4682      	mov	sl, r0
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d156      	bne.n	8005dd8 <pow+0xe4>
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa fe63 	bl	80009fc <__aeabi_dcmpun>
 8005d36:	9003      	str	r0, [sp, #12]
 8005d38:	b1e8      	cbz	r0, 8005d76 <pow+0x82>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fe29 	bl	8000998 <__aeabi_dcmpeq>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d046      	beq.n	8005dd8 <pow+0xe4>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <pow+0x29c>)
 8005d52:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005d56:	9305      	str	r3, [sp, #20]
 8005d58:	4b8e      	ldr	r3, [pc, #568]	; (8005f94 <pow+0x2a0>)
 8005d5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d62:	9b02      	ldr	r3, [sp, #8]
 8005d64:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d031      	beq.n	8005dd0 <pow+0xdc>
 8005d6c:	a804      	add	r0, sp, #16
 8005d6e:	f000 fedf 	bl	8006b30 <matherr>
 8005d72:	bb38      	cbnz	r0, 8005dc4 <pow+0xd0>
 8005d74:	e058      	b.n	8005e28 <pow+0x134>
 8005d76:	f04f 0a00 	mov.w	sl, #0
 8005d7a:	f04f 0b00 	mov.w	fp, #0
 8005d7e:	4652      	mov	r2, sl
 8005d80:	465b      	mov	r3, fp
 8005d82:	4640      	mov	r0, r8
 8005d84:	4649      	mov	r1, r9
 8005d86:	f7fa fe07 	bl	8000998 <__aeabi_dcmpeq>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d051      	beq.n	8005e32 <pow+0x13e>
 8005d8e:	4652      	mov	r2, sl
 8005d90:	465b      	mov	r3, fp
 8005d92:	4620      	mov	r0, r4
 8005d94:	4629      	mov	r1, r5
 8005d96:	f7fa fdff 	bl	8000998 <__aeabi_dcmpeq>
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	b308      	cbz	r0, 8005de2 <pow+0xee>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	4b7b      	ldr	r3, [pc, #492]	; (8005f90 <pow+0x29c>)
 8005da4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	9b03      	ldr	r3, [sp, #12]
 8005dac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005db0:	930c      	str	r3, [sp, #48]	; 0x30
 8005db2:	9b02      	ldr	r3, [sp, #8]
 8005db4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0d7      	beq.n	8005d6c <pow+0x78>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4b75      	ldr	r3, [pc, #468]	; (8005f94 <pow+0x2a0>)
 8005dc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dc6:	b11b      	cbz	r3, 8005dd0 <pow+0xdc>
 8005dc8:	f7ff ff62 	bl	8005c90 <__errno>
 8005dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dce:	6003      	str	r3, [r0, #0]
 8005dd0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005dd4:	e9cd 3400 	strd	r3, r4, [sp]
 8005dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ddc:	b00f      	add	sp, #60	; 0x3c
 8005dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de2:	4620      	mov	r0, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	f000 fe9d 	bl	8006b24 <finite>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d0f4      	beq.n	8005dd8 <pow+0xe4>
 8005dee:	4652      	mov	r2, sl
 8005df0:	465b      	mov	r3, fp
 8005df2:	4620      	mov	r0, r4
 8005df4:	4629      	mov	r1, r5
 8005df6:	f7fa fdd9 	bl	80009ac <__aeabi_dcmplt>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d0ec      	beq.n	8005dd8 <pow+0xe4>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	4b63      	ldr	r3, [pc, #396]	; (8005f90 <pow+0x29c>)
 8005e04:	960c      	str	r6, [sp, #48]	; 0x30
 8005e06:	9305      	str	r3, [sp, #20]
 8005e08:	f997 3000 	ldrsb.w	r3, [r7]
 8005e0c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005e10:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005e14:	b913      	cbnz	r3, 8005e1c <pow+0x128>
 8005e16:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005e1a:	e7a7      	b.n	8005d6c <pow+0x78>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	495e      	ldr	r1, [pc, #376]	; (8005f98 <pow+0x2a4>)
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e26:	d1a1      	bne.n	8005d6c <pow+0x78>
 8005e28:	f7ff ff32 	bl	8005c90 <__errno>
 8005e2c:	2321      	movs	r3, #33	; 0x21
 8005e2e:	6003      	str	r3, [r0, #0]
 8005e30:	e7c8      	b.n	8005dc4 <pow+0xd0>
 8005e32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e36:	f000 fe75 	bl	8006b24 <finite>
 8005e3a:	9002      	str	r0, [sp, #8]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d177      	bne.n	8005f30 <pow+0x23c>
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f000 fe6e 	bl	8006b24 <finite>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d071      	beq.n	8005f30 <pow+0x23c>
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f000 fe68 	bl	8006b24 <finite>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d06b      	beq.n	8005f30 <pow+0x23c>
 8005e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7fa fdcc 	bl	80009fc <__aeabi_dcmpun>
 8005e64:	f997 7000 	ldrsb.w	r7, [r7]
 8005e68:	4b49      	ldr	r3, [pc, #292]	; (8005f90 <pow+0x29c>)
 8005e6a:	b1a0      	cbz	r0, 8005e96 <pow+0x1a2>
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e72:	9b02      	ldr	r3, [sp, #8]
 8005e74:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005e78:	930c      	str	r3, [sp, #48]	; 0x30
 8005e7a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005e7e:	2f00      	cmp	r7, #0
 8005e80:	d0c9      	beq.n	8005e16 <pow+0x122>
 8005e82:	4652      	mov	r2, sl
 8005e84:	465b      	mov	r3, fp
 8005e86:	4650      	mov	r0, sl
 8005e88:	4659      	mov	r1, fp
 8005e8a:	f7fa fc47 	bl	800071c <__aeabi_ddiv>
 8005e8e:	2f02      	cmp	r7, #2
 8005e90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e94:	e7c7      	b.n	8005e26 <pow+0x132>
 8005e96:	2203      	movs	r2, #3
 8005e98:	900c      	str	r0, [sp, #48]	; 0x30
 8005e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b3d      	ldr	r3, [pc, #244]	; (8005f9c <pow+0x2a8>)
 8005ea6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005eaa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005eae:	f7fa fb0b 	bl	80004c8 <__aeabi_dmul>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	bb17      	cbnz	r7, 8005efe <pow+0x20a>
 8005eb8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005ebc:	4b38      	ldr	r3, [pc, #224]	; (8005fa0 <pow+0x2ac>)
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4652      	mov	r2, sl
 8005ec8:	465b      	mov	r3, fp
 8005eca:	f7fa fd6f 	bl	80009ac <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d054      	beq.n	8005f7c <pow+0x288>
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f000 fe33 	bl	8006b40 <rint>
 8005eda:	4622      	mov	r2, r4
 8005edc:	462b      	mov	r3, r5
 8005ede:	f7fa fd5b 	bl	8000998 <__aeabi_dcmpeq>
 8005ee2:	b920      	cbnz	r0, 8005eee <pow+0x1fa>
 8005ee4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005ee8:	4b2e      	ldr	r3, [pc, #184]	; (8005fa4 <pow+0x2b0>)
 8005eea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eee:	f996 3000 	ldrsb.w	r3, [r6]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d142      	bne.n	8005f7c <pow+0x288>
 8005ef6:	f7ff fecb 	bl	8005c90 <__errno>
 8005efa:	2322      	movs	r3, #34	; 0x22
 8005efc:	e797      	b.n	8005e2e <pow+0x13a>
 8005efe:	2200      	movs	r2, #0
 8005f00:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <pow+0x2b4>)
 8005f02:	4640      	mov	r0, r8
 8005f04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f08:	4649      	mov	r1, r9
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	f7fa fd4d 	bl	80009ac <__aeabi_dcmplt>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d0eb      	beq.n	8005eee <pow+0x1fa>
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f000 fe11 	bl	8006b40 <rint>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	f7fa fd39 	bl	8000998 <__aeabi_dcmpeq>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d1e1      	bne.n	8005eee <pow+0x1fa>
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <pow+0x2a4>)
 8005f2e:	e7dc      	b.n	8005eea <pow+0x1f6>
 8005f30:	2200      	movs	r2, #0
 8005f32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f36:	2300      	movs	r3, #0
 8005f38:	f7fa fd2e 	bl	8000998 <__aeabi_dcmpeq>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f43f af4b 	beq.w	8005dd8 <pow+0xe4>
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f000 fded 	bl	8006b24 <finite>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	f43f af44 	beq.w	8005dd8 <pow+0xe4>
 8005f50:	4620      	mov	r0, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	f000 fde6 	bl	8006b24 <finite>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f43f af3d 	beq.w	8005dd8 <pow+0xe4>
 8005f5e:	2304      	movs	r3, #4
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <pow+0x29c>)
 8005f64:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005f68:	9305      	str	r3, [sp, #20]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2400      	movs	r4, #0
 8005f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f70:	2300      	movs	r3, #0
 8005f72:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005f76:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005f7a:	e7b8      	b.n	8005eee <pow+0x1fa>
 8005f7c:	a804      	add	r0, sp, #16
 8005f7e:	f000 fdd7 	bl	8006b30 <matherr>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f47f af1e 	bne.w	8005dc4 <pow+0xd0>
 8005f88:	e7b5      	b.n	8005ef6 <pow+0x202>
 8005f8a:	bf00      	nop
 8005f8c:	20000070 	.word	0x20000070
 8005f90:	08006d8c 	.word	0x08006d8c
 8005f94:	3ff00000 	.word	0x3ff00000
 8005f98:	fff00000 	.word	0xfff00000
 8005f9c:	3fe00000 	.word	0x3fe00000
 8005fa0:	47efffff 	.word	0x47efffff
 8005fa4:	c7efffff 	.word	0xc7efffff
 8005fa8:	7ff00000 	.word	0x7ff00000
 8005fac:	00000000 	.word	0x00000000

08005fb0 <__ieee754_pow>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	b091      	sub	sp, #68	; 0x44
 8005fb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005fbe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005fc2:	ea55 0302 	orrs.w	r3, r5, r2
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	4688      	mov	r8, r1
 8005fca:	f000 84b7 	beq.w	800693c <__ieee754_pow+0x98c>
 8005fce:	4b80      	ldr	r3, [pc, #512]	; (80061d0 <__ieee754_pow+0x220>)
 8005fd0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	4682      	mov	sl, r0
 8005fda:	dc09      	bgt.n	8005ff0 <__ieee754_pow+0x40>
 8005fdc:	d103      	bne.n	8005fe6 <__ieee754_pow+0x36>
 8005fde:	b938      	cbnz	r0, 8005ff0 <__ieee754_pow+0x40>
 8005fe0:	42a5      	cmp	r5, r4
 8005fe2:	dc0d      	bgt.n	8006000 <__ieee754_pow+0x50>
 8005fe4:	e001      	b.n	8005fea <__ieee754_pow+0x3a>
 8005fe6:	429d      	cmp	r5, r3
 8005fe8:	dc02      	bgt.n	8005ff0 <__ieee754_pow+0x40>
 8005fea:	429d      	cmp	r5, r3
 8005fec:	d10e      	bne.n	800600c <__ieee754_pow+0x5c>
 8005fee:	b16a      	cbz	r2, 800600c <__ieee754_pow+0x5c>
 8005ff0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005ff4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ff8:	ea54 030a 	orrs.w	r3, r4, sl
 8005ffc:	f000 849e 	beq.w	800693c <__ieee754_pow+0x98c>
 8006000:	4874      	ldr	r0, [pc, #464]	; (80061d4 <__ieee754_pow+0x224>)
 8006002:	b011      	add	sp, #68	; 0x44
 8006004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	f000 bd94 	b.w	8006b34 <nan>
 800600c:	f1b9 0f00 	cmp.w	r9, #0
 8006010:	da53      	bge.n	80060ba <__ieee754_pow+0x10a>
 8006012:	4b71      	ldr	r3, [pc, #452]	; (80061d8 <__ieee754_pow+0x228>)
 8006014:	429d      	cmp	r5, r3
 8006016:	dc4e      	bgt.n	80060b6 <__ieee754_pow+0x106>
 8006018:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800601c:	429d      	cmp	r5, r3
 800601e:	dd4c      	ble.n	80060ba <__ieee754_pow+0x10a>
 8006020:	152b      	asrs	r3, r5, #20
 8006022:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006026:	2b14      	cmp	r3, #20
 8006028:	dd28      	ble.n	800607c <__ieee754_pow+0xcc>
 800602a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800602e:	fa22 f103 	lsr.w	r1, r2, r3
 8006032:	fa01 f303 	lsl.w	r3, r1, r3
 8006036:	4293      	cmp	r3, r2
 8006038:	d13f      	bne.n	80060ba <__ieee754_pow+0x10a>
 800603a:	f001 0101 	and.w	r1, r1, #1
 800603e:	f1c1 0302 	rsb	r3, r1, #2
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2a00      	cmp	r2, #0
 8006046:	d15c      	bne.n	8006102 <__ieee754_pow+0x152>
 8006048:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <__ieee754_pow+0x220>)
 800604a:	429d      	cmp	r5, r3
 800604c:	d126      	bne.n	800609c <__ieee754_pow+0xec>
 800604e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006052:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006056:	ea53 030a 	orrs.w	r3, r3, sl
 800605a:	f000 846f 	beq.w	800693c <__ieee754_pow+0x98c>
 800605e:	4b5f      	ldr	r3, [pc, #380]	; (80061dc <__ieee754_pow+0x22c>)
 8006060:	429c      	cmp	r4, r3
 8006062:	dd2c      	ble.n	80060be <__ieee754_pow+0x10e>
 8006064:	2e00      	cmp	r6, #0
 8006066:	f280 846f 	bge.w	8006948 <__ieee754_pow+0x998>
 800606a:	f04f 0b00 	mov.w	fp, #0
 800606e:	f04f 0c00 	mov.w	ip, #0
 8006072:	4658      	mov	r0, fp
 8006074:	4661      	mov	r1, ip
 8006076:	b011      	add	sp, #68	; 0x44
 8006078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607c:	2a00      	cmp	r2, #0
 800607e:	d13e      	bne.n	80060fe <__ieee754_pow+0x14e>
 8006080:	f1c3 0314 	rsb	r3, r3, #20
 8006084:	fa45 f103 	asr.w	r1, r5, r3
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	42ab      	cmp	r3, r5
 800608e:	f040 8463 	bne.w	8006958 <__ieee754_pow+0x9a8>
 8006092:	f001 0101 	and.w	r1, r1, #1
 8006096:	f1c1 0302 	rsb	r3, r1, #2
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4b50      	ldr	r3, [pc, #320]	; (80061e0 <__ieee754_pow+0x230>)
 800609e:	429d      	cmp	r5, r3
 80060a0:	d114      	bne.n	80060cc <__ieee754_pow+0x11c>
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	f280 8454 	bge.w	8006950 <__ieee754_pow+0x9a0>
 80060a8:	463a      	mov	r2, r7
 80060aa:	4643      	mov	r3, r8
 80060ac:	2000      	movs	r0, #0
 80060ae:	494c      	ldr	r1, [pc, #304]	; (80061e0 <__ieee754_pow+0x230>)
 80060b0:	f7fa fb34 	bl	800071c <__aeabi_ddiv>
 80060b4:	e013      	b.n	80060de <__ieee754_pow+0x12e>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e7c3      	b.n	8006042 <__ieee754_pow+0x92>
 80060ba:	2300      	movs	r3, #0
 80060bc:	e7c1      	b.n	8006042 <__ieee754_pow+0x92>
 80060be:	2e00      	cmp	r6, #0
 80060c0:	dad3      	bge.n	800606a <__ieee754_pow+0xba>
 80060c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80060c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80060ca:	e7d2      	b.n	8006072 <__ieee754_pow+0xc2>
 80060cc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80060d0:	d108      	bne.n	80060e4 <__ieee754_pow+0x134>
 80060d2:	463a      	mov	r2, r7
 80060d4:	4643      	mov	r3, r8
 80060d6:	4638      	mov	r0, r7
 80060d8:	4641      	mov	r1, r8
 80060da:	f7fa f9f5 	bl	80004c8 <__aeabi_dmul>
 80060de:	4683      	mov	fp, r0
 80060e0:	468c      	mov	ip, r1
 80060e2:	e7c6      	b.n	8006072 <__ieee754_pow+0xc2>
 80060e4:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <__ieee754_pow+0x234>)
 80060e6:	429e      	cmp	r6, r3
 80060e8:	d10b      	bne.n	8006102 <__ieee754_pow+0x152>
 80060ea:	f1b9 0f00 	cmp.w	r9, #0
 80060ee:	db08      	blt.n	8006102 <__ieee754_pow+0x152>
 80060f0:	4638      	mov	r0, r7
 80060f2:	4641      	mov	r1, r8
 80060f4:	b011      	add	sp, #68	; 0x44
 80060f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	f000 bc63 	b.w	80069c4 <__ieee754_sqrt>
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	4638      	mov	r0, r7
 8006104:	4641      	mov	r1, r8
 8006106:	f000 fd09 	bl	8006b1c <fabs>
 800610a:	4683      	mov	fp, r0
 800610c:	468c      	mov	ip, r1
 800610e:	f1ba 0f00 	cmp.w	sl, #0
 8006112:	d12b      	bne.n	800616c <__ieee754_pow+0x1bc>
 8006114:	b124      	cbz	r4, 8006120 <__ieee754_pow+0x170>
 8006116:	4b32      	ldr	r3, [pc, #200]	; (80061e0 <__ieee754_pow+0x230>)
 8006118:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800611c:	429a      	cmp	r2, r3
 800611e:	d125      	bne.n	800616c <__ieee754_pow+0x1bc>
 8006120:	2e00      	cmp	r6, #0
 8006122:	da07      	bge.n	8006134 <__ieee754_pow+0x184>
 8006124:	465a      	mov	r2, fp
 8006126:	4663      	mov	r3, ip
 8006128:	2000      	movs	r0, #0
 800612a:	492d      	ldr	r1, [pc, #180]	; (80061e0 <__ieee754_pow+0x230>)
 800612c:	f7fa faf6 	bl	800071c <__aeabi_ddiv>
 8006130:	4683      	mov	fp, r0
 8006132:	468c      	mov	ip, r1
 8006134:	f1b9 0f00 	cmp.w	r9, #0
 8006138:	da9b      	bge.n	8006072 <__ieee754_pow+0xc2>
 800613a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800613e:	9b00      	ldr	r3, [sp, #0]
 8006140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006144:	4323      	orrs	r3, r4
 8006146:	d108      	bne.n	800615a <__ieee754_pow+0x1aa>
 8006148:	465a      	mov	r2, fp
 800614a:	4663      	mov	r3, ip
 800614c:	4658      	mov	r0, fp
 800614e:	4661      	mov	r1, ip
 8006150:	f7fa f802 	bl	8000158 <__aeabi_dsub>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	e7aa      	b.n	80060b0 <__ieee754_pow+0x100>
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d188      	bne.n	8006072 <__ieee754_pow+0xc2>
 8006160:	4658      	mov	r0, fp
 8006162:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006166:	4683      	mov	fp, r0
 8006168:	469c      	mov	ip, r3
 800616a:	e782      	b.n	8006072 <__ieee754_pow+0xc2>
 800616c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006170:	f109 33ff 	add.w	r3, r9, #4294967295
 8006174:	930d      	str	r3, [sp, #52]	; 0x34
 8006176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	d104      	bne.n	8006188 <__ieee754_pow+0x1d8>
 800617e:	463a      	mov	r2, r7
 8006180:	4643      	mov	r3, r8
 8006182:	4638      	mov	r0, r7
 8006184:	4641      	mov	r1, r8
 8006186:	e7e3      	b.n	8006150 <__ieee754_pow+0x1a0>
 8006188:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <__ieee754_pow+0x238>)
 800618a:	429d      	cmp	r5, r3
 800618c:	f340 80fe 	ble.w	800638c <__ieee754_pow+0x3dc>
 8006190:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006194:	429d      	cmp	r5, r3
 8006196:	dd0b      	ble.n	80061b0 <__ieee754_pow+0x200>
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <__ieee754_pow+0x22c>)
 800619a:	429c      	cmp	r4, r3
 800619c:	dc0e      	bgt.n	80061bc <__ieee754_pow+0x20c>
 800619e:	2e00      	cmp	r6, #0
 80061a0:	f6bf af63 	bge.w	800606a <__ieee754_pow+0xba>
 80061a4:	a308      	add	r3, pc, #32	; (adr r3, 80061c8 <__ieee754_pow+0x218>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	e794      	b.n	80060da <__ieee754_pow+0x12a>
 80061b0:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <__ieee754_pow+0x23c>)
 80061b2:	429c      	cmp	r4, r3
 80061b4:	ddf3      	ble.n	800619e <__ieee754_pow+0x1ee>
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <__ieee754_pow+0x230>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	dd19      	ble.n	80061f0 <__ieee754_pow+0x240>
 80061bc:	2e00      	cmp	r6, #0
 80061be:	dcf1      	bgt.n	80061a4 <__ieee754_pow+0x1f4>
 80061c0:	e753      	b.n	800606a <__ieee754_pow+0xba>
 80061c2:	bf00      	nop
 80061c4:	f3af 8000 	nop.w
 80061c8:	8800759c 	.word	0x8800759c
 80061cc:	7e37e43c 	.word	0x7e37e43c
 80061d0:	7ff00000 	.word	0x7ff00000
 80061d4:	08006d8f 	.word	0x08006d8f
 80061d8:	433fffff 	.word	0x433fffff
 80061dc:	3fefffff 	.word	0x3fefffff
 80061e0:	3ff00000 	.word	0x3ff00000
 80061e4:	3fe00000 	.word	0x3fe00000
 80061e8:	41e00000 	.word	0x41e00000
 80061ec:	3feffffe 	.word	0x3feffffe
 80061f0:	4661      	mov	r1, ip
 80061f2:	2200      	movs	r2, #0
 80061f4:	4b60      	ldr	r3, [pc, #384]	; (8006378 <__ieee754_pow+0x3c8>)
 80061f6:	4658      	mov	r0, fp
 80061f8:	f7f9 ffae 	bl	8000158 <__aeabi_dsub>
 80061fc:	a354      	add	r3, pc, #336	; (adr r3, 8006350 <__ieee754_pow+0x3a0>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	4604      	mov	r4, r0
 8006204:	460d      	mov	r5, r1
 8006206:	f7fa f95f 	bl	80004c8 <__aeabi_dmul>
 800620a:	a353      	add	r3, pc, #332	; (adr r3, 8006358 <__ieee754_pow+0x3a8>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	4606      	mov	r6, r0
 8006212:	460f      	mov	r7, r1
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa f956 	bl	80004c8 <__aeabi_dmul>
 800621c:	2200      	movs	r2, #0
 800621e:	4682      	mov	sl, r0
 8006220:	468b      	mov	fp, r1
 8006222:	4b56      	ldr	r3, [pc, #344]	; (800637c <__ieee754_pow+0x3cc>)
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7fa f94e 	bl	80004c8 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	a14b      	add	r1, pc, #300	; (adr r1, 8006360 <__ieee754_pow+0x3b0>)
 8006232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006236:	f7f9 ff8f 	bl	8000158 <__aeabi_dsub>
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	f7fa f943 	bl	80004c8 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	2000      	movs	r0, #0
 8006248:	494d      	ldr	r1, [pc, #308]	; (8006380 <__ieee754_pow+0x3d0>)
 800624a:	f7f9 ff85 	bl	8000158 <__aeabi_dsub>
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	4680      	mov	r8, r0
 8006254:	4689      	mov	r9, r1
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa f935 	bl	80004c8 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7fa f92f 	bl	80004c8 <__aeabi_dmul>
 800626a:	a33f      	add	r3, pc, #252	; (adr r3, 8006368 <__ieee754_pow+0x3b8>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f92a 	bl	80004c8 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	f7f9 ff6c 	bl	8000158 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4604      	mov	r4, r0
 8006286:	460d      	mov	r5, r1
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	f7f9 ff66 	bl	800015c <__adddf3>
 8006290:	2000      	movs	r0, #0
 8006292:	468b      	mov	fp, r1
 8006294:	4682      	mov	sl, r0
 8006296:	4632      	mov	r2, r6
 8006298:	463b      	mov	r3, r7
 800629a:	f7f9 ff5d 	bl	8000158 <__aeabi_dsub>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7f9 ff57 	bl	8000158 <__aeabi_dsub>
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062ae:	3b01      	subs	r3, #1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	bf0c      	ite	eq
 80062b8:	4c32      	ldreq	r4, [pc, #200]	; (8006384 <__ieee754_pow+0x3d4>)
 80062ba:	4c2f      	ldrne	r4, [pc, #188]	; (8006378 <__ieee754_pow+0x3c8>)
 80062bc:	4606      	mov	r6, r0
 80062be:	e9cd 3400 	strd	r3, r4, [sp]
 80062c2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062c6:	2400      	movs	r4, #0
 80062c8:	460f      	mov	r7, r1
 80062ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	f7f9 ff41 	bl	8000158 <__aeabi_dsub>
 80062d6:	4652      	mov	r2, sl
 80062d8:	465b      	mov	r3, fp
 80062da:	f7fa f8f5 	bl	80004c8 <__aeabi_dmul>
 80062de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062e2:	4680      	mov	r8, r0
 80062e4:	4689      	mov	r9, r1
 80062e6:	4630      	mov	r0, r6
 80062e8:	4639      	mov	r1, r7
 80062ea:	f7fa f8ed 	bl	80004c8 <__aeabi_dmul>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7f9 ff31 	bl	800015c <__adddf3>
 80062fa:	4622      	mov	r2, r4
 80062fc:	462b      	mov	r3, r5
 80062fe:	4680      	mov	r8, r0
 8006300:	4689      	mov	r9, r1
 8006302:	4650      	mov	r0, sl
 8006304:	4659      	mov	r1, fp
 8006306:	f7fa f8df 	bl	80004c8 <__aeabi_dmul>
 800630a:	4604      	mov	r4, r0
 800630c:	460d      	mov	r5, r1
 800630e:	460b      	mov	r3, r1
 8006310:	4602      	mov	r2, r0
 8006312:	4649      	mov	r1, r9
 8006314:	4640      	mov	r0, r8
 8006316:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800631a:	f7f9 ff1f 	bl	800015c <__adddf3>
 800631e:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <__ieee754_pow+0x3d8>)
 8006320:	4682      	mov	sl, r0
 8006322:	4299      	cmp	r1, r3
 8006324:	460f      	mov	r7, r1
 8006326:	460e      	mov	r6, r1
 8006328:	f340 82e1 	ble.w	80068ee <__ieee754_pow+0x93e>
 800632c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006330:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006334:	4303      	orrs	r3, r0
 8006336:	f000 81db 	beq.w	80066f0 <__ieee754_pow+0x740>
 800633a:	a30d      	add	r3, pc, #52	; (adr r3, 8006370 <__ieee754_pow+0x3c0>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006344:	f7fa f8c0 	bl	80004c8 <__aeabi_dmul>
 8006348:	a309      	add	r3, pc, #36	; (adr r3, 8006370 <__ieee754_pow+0x3c0>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	e6c4      	b.n	80060da <__ieee754_pow+0x12a>
 8006350:	60000000 	.word	0x60000000
 8006354:	3ff71547 	.word	0x3ff71547
 8006358:	f85ddf44 	.word	0xf85ddf44
 800635c:	3e54ae0b 	.word	0x3e54ae0b
 8006360:	55555555 	.word	0x55555555
 8006364:	3fd55555 	.word	0x3fd55555
 8006368:	652b82fe 	.word	0x652b82fe
 800636c:	3ff71547 	.word	0x3ff71547
 8006370:	8800759c 	.word	0x8800759c
 8006374:	7e37e43c 	.word	0x7e37e43c
 8006378:	3ff00000 	.word	0x3ff00000
 800637c:	3fd00000 	.word	0x3fd00000
 8006380:	3fe00000 	.word	0x3fe00000
 8006384:	bff00000 	.word	0xbff00000
 8006388:	408fffff 	.word	0x408fffff
 800638c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	da08      	bge.n	80063a8 <__ieee754_pow+0x3f8>
 8006396:	4658      	mov	r0, fp
 8006398:	4bcd      	ldr	r3, [pc, #820]	; (80066d0 <__ieee754_pow+0x720>)
 800639a:	4661      	mov	r1, ip
 800639c:	f7fa f894 	bl	80004c8 <__aeabi_dmul>
 80063a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80063a4:	4683      	mov	fp, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	1523      	asrs	r3, r4, #20
 80063aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063ae:	4413      	add	r3, r2
 80063b0:	930c      	str	r3, [sp, #48]	; 0x30
 80063b2:	4bc8      	ldr	r3, [pc, #800]	; (80066d4 <__ieee754_pow+0x724>)
 80063b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80063bc:	429c      	cmp	r4, r3
 80063be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80063c2:	dd08      	ble.n	80063d6 <__ieee754_pow+0x426>
 80063c4:	4bc4      	ldr	r3, [pc, #784]	; (80066d8 <__ieee754_pow+0x728>)
 80063c6:	429c      	cmp	r4, r3
 80063c8:	f340 815b 	ble.w	8006682 <__ieee754_pow+0x6d2>
 80063cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80063d2:	3301      	adds	r3, #1
 80063d4:	930c      	str	r3, [sp, #48]	; 0x30
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	4658      	mov	r0, fp
 80063dc:	4629      	mov	r1, r5
 80063de:	4bbf      	ldr	r3, [pc, #764]	; (80066dc <__ieee754_pow+0x72c>)
 80063e0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80063e4:	444b      	add	r3, r9
 80063e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80063ee:	461a      	mov	r2, r3
 80063f0:	4623      	mov	r3, r4
 80063f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063f6:	f7f9 feaf 	bl	8000158 <__aeabi_dsub>
 80063fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063fe:	4606      	mov	r6, r0
 8006400:	460f      	mov	r7, r1
 8006402:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006406:	f7f9 fea9 	bl	800015c <__adddf3>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	2000      	movs	r0, #0
 8006410:	49b3      	ldr	r1, [pc, #716]	; (80066e0 <__ieee754_pow+0x730>)
 8006412:	f7fa f983 	bl	800071c <__aeabi_ddiv>
 8006416:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4630      	mov	r0, r6
 8006420:	4639      	mov	r1, r7
 8006422:	f7fa f851 	bl	80004c8 <__aeabi_dmul>
 8006426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800642a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800642e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	106d      	asrs	r5, r5, #1
 8006438:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006442:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006446:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800644a:	4650      	mov	r0, sl
 800644c:	4659      	mov	r1, fp
 800644e:	4614      	mov	r4, r2
 8006450:	461d      	mov	r5, r3
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4630      	mov	r0, r6
 800645c:	4639      	mov	r1, r7
 800645e:	f7f9 fe7b 	bl	8000158 <__aeabi_dsub>
 8006462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006466:	4606      	mov	r6, r0
 8006468:	460f      	mov	r7, r1
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7f9 fe73 	bl	8000158 <__aeabi_dsub>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800647a:	f7f9 fe6d 	bl	8000158 <__aeabi_dsub>
 800647e:	4652      	mov	r2, sl
 8006480:	465b      	mov	r3, fp
 8006482:	f7fa f821 	bl	80004c8 <__aeabi_dmul>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7f9 fe63 	bl	8000158 <__aeabi_dsub>
 8006492:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006496:	f7fa f817 	bl	80004c8 <__aeabi_dmul>
 800649a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800649e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	f7fa f80f 	bl	80004c8 <__aeabi_dmul>
 80064aa:	a377      	add	r3, pc, #476	; (adr r3, 8006688 <__ieee754_pow+0x6d8>)
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	4604      	mov	r4, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	f7fa f808 	bl	80004c8 <__aeabi_dmul>
 80064b8:	a375      	add	r3, pc, #468	; (adr r3, 8006690 <__ieee754_pow+0x6e0>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7f9 fe4d 	bl	800015c <__adddf3>
 80064c2:	4622      	mov	r2, r4
 80064c4:	462b      	mov	r3, r5
 80064c6:	f7f9 ffff 	bl	80004c8 <__aeabi_dmul>
 80064ca:	a373      	add	r3, pc, #460	; (adr r3, 8006698 <__ieee754_pow+0x6e8>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f7f9 fe44 	bl	800015c <__adddf3>
 80064d4:	4622      	mov	r2, r4
 80064d6:	462b      	mov	r3, r5
 80064d8:	f7f9 fff6 	bl	80004c8 <__aeabi_dmul>
 80064dc:	a370      	add	r3, pc, #448	; (adr r3, 80066a0 <__ieee754_pow+0x6f0>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7f9 fe3b 	bl	800015c <__adddf3>
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	f7f9 ffed 	bl	80004c8 <__aeabi_dmul>
 80064ee:	a36e      	add	r3, pc, #440	; (adr r3, 80066a8 <__ieee754_pow+0x6f8>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7f9 fe32 	bl	800015c <__adddf3>
 80064f8:	4622      	mov	r2, r4
 80064fa:	462b      	mov	r3, r5
 80064fc:	f7f9 ffe4 	bl	80004c8 <__aeabi_dmul>
 8006500:	a36b      	add	r3, pc, #428	; (adr r3, 80066b0 <__ieee754_pow+0x700>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7f9 fe29 	bl	800015c <__adddf3>
 800650a:	4622      	mov	r2, r4
 800650c:	4606      	mov	r6, r0
 800650e:	460f      	mov	r7, r1
 8006510:	462b      	mov	r3, r5
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7f9 ffd7 	bl	80004c8 <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4630      	mov	r0, r6
 8006520:	4639      	mov	r1, r7
 8006522:	f7f9 ffd1 	bl	80004c8 <__aeabi_dmul>
 8006526:	4604      	mov	r4, r0
 8006528:	460d      	mov	r5, r1
 800652a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800652e:	4652      	mov	r2, sl
 8006530:	465b      	mov	r3, fp
 8006532:	f7f9 fe13 	bl	800015c <__adddf3>
 8006536:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800653a:	f7f9 ffc5 	bl	80004c8 <__aeabi_dmul>
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	f7f9 fe0b 	bl	800015c <__adddf3>
 8006546:	4652      	mov	r2, sl
 8006548:	4606      	mov	r6, r0
 800654a:	460f      	mov	r7, r1
 800654c:	465b      	mov	r3, fp
 800654e:	4650      	mov	r0, sl
 8006550:	4659      	mov	r1, fp
 8006552:	f7f9 ffb9 	bl	80004c8 <__aeabi_dmul>
 8006556:	2200      	movs	r2, #0
 8006558:	4b62      	ldr	r3, [pc, #392]	; (80066e4 <__ieee754_pow+0x734>)
 800655a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800655e:	f7f9 fdfd 	bl	800015c <__adddf3>
 8006562:	4632      	mov	r2, r6
 8006564:	463b      	mov	r3, r7
 8006566:	f7f9 fdf9 	bl	800015c <__adddf3>
 800656a:	9804      	ldr	r0, [sp, #16]
 800656c:	460d      	mov	r5, r1
 800656e:	4604      	mov	r4, r0
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4650      	mov	r0, sl
 8006576:	4659      	mov	r1, fp
 8006578:	f7f9 ffa6 	bl	80004c8 <__aeabi_dmul>
 800657c:	2200      	movs	r2, #0
 800657e:	4682      	mov	sl, r0
 8006580:	468b      	mov	fp, r1
 8006582:	4b58      	ldr	r3, [pc, #352]	; (80066e4 <__ieee754_pow+0x734>)
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	f7f9 fde6 	bl	8000158 <__aeabi_dsub>
 800658c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006590:	f7f9 fde2 	bl	8000158 <__aeabi_dsub>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7f9 fddc 	bl	8000158 <__aeabi_dsub>
 80065a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065a4:	f7f9 ff90 	bl	80004c8 <__aeabi_dmul>
 80065a8:	4622      	mov	r2, r4
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065b2:	462b      	mov	r3, r5
 80065b4:	f7f9 ff88 	bl	80004c8 <__aeabi_dmul>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7f9 fdcc 	bl	800015c <__adddf3>
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4650      	mov	r0, sl
 80065ce:	4659      	mov	r1, fp
 80065d0:	f7f9 fdc4 	bl	800015c <__adddf3>
 80065d4:	a338      	add	r3, pc, #224	; (adr r3, 80066b8 <__ieee754_pow+0x708>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	9804      	ldr	r0, [sp, #16]
 80065dc:	460d      	mov	r5, r1
 80065de:	4604      	mov	r4, r0
 80065e0:	f7f9 ff72 	bl	80004c8 <__aeabi_dmul>
 80065e4:	4652      	mov	r2, sl
 80065e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065ea:	465b      	mov	r3, fp
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7f9 fdb2 	bl	8000158 <__aeabi_dsub>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7f9 fdac 	bl	8000158 <__aeabi_dsub>
 8006600:	a32f      	add	r3, pc, #188	; (adr r3, 80066c0 <__ieee754_pow+0x710>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f7f9 ff5f 	bl	80004c8 <__aeabi_dmul>
 800660a:	a32f      	add	r3, pc, #188	; (adr r3, 80066c8 <__ieee754_pow+0x718>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	4606      	mov	r6, r0
 8006612:	460f      	mov	r7, r1
 8006614:	4620      	mov	r0, r4
 8006616:	4629      	mov	r1, r5
 8006618:	f7f9 ff56 	bl	80004c8 <__aeabi_dmul>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4630      	mov	r0, r6
 8006622:	4639      	mov	r1, r7
 8006624:	f7f9 fd9a 	bl	800015c <__adddf3>
 8006628:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <__ieee754_pow+0x738>)
 800662a:	444b      	add	r3, r9
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 fd94 	bl	800015c <__adddf3>
 8006634:	4604      	mov	r4, r0
 8006636:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006638:	460d      	mov	r5, r1
 800663a:	f7f9 fedb 	bl	80003f4 <__aeabi_i2d>
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <__ieee754_pow+0x73c>)
 8006644:	4622      	mov	r2, r4
 8006646:	444b      	add	r3, r9
 8006648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800664c:	462b      	mov	r3, r5
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	f7f9 fd83 	bl	800015c <__adddf3>
 8006656:	4642      	mov	r2, r8
 8006658:	464b      	mov	r3, r9
 800665a:	f7f9 fd7f 	bl	800015c <__adddf3>
 800665e:	4632      	mov	r2, r6
 8006660:	463b      	mov	r3, r7
 8006662:	f7f9 fd7b 	bl	800015c <__adddf3>
 8006666:	9804      	ldr	r0, [sp, #16]
 8006668:	4632      	mov	r2, r6
 800666a:	463b      	mov	r3, r7
 800666c:	4682      	mov	sl, r0
 800666e:	468b      	mov	fp, r1
 8006670:	f7f9 fd72 	bl	8000158 <__aeabi_dsub>
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	f7f9 fd6e 	bl	8000158 <__aeabi_dsub>
 800667c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006680:	e60b      	b.n	800629a <__ieee754_pow+0x2ea>
 8006682:	f04f 0801 	mov.w	r8, #1
 8006686:	e6a8      	b.n	80063da <__ieee754_pow+0x42a>
 8006688:	4a454eef 	.word	0x4a454eef
 800668c:	3fca7e28 	.word	0x3fca7e28
 8006690:	93c9db65 	.word	0x93c9db65
 8006694:	3fcd864a 	.word	0x3fcd864a
 8006698:	a91d4101 	.word	0xa91d4101
 800669c:	3fd17460 	.word	0x3fd17460
 80066a0:	518f264d 	.word	0x518f264d
 80066a4:	3fd55555 	.word	0x3fd55555
 80066a8:	db6fabff 	.word	0xdb6fabff
 80066ac:	3fdb6db6 	.word	0x3fdb6db6
 80066b0:	33333303 	.word	0x33333303
 80066b4:	3fe33333 	.word	0x3fe33333
 80066b8:	e0000000 	.word	0xe0000000
 80066bc:	3feec709 	.word	0x3feec709
 80066c0:	dc3a03fd 	.word	0xdc3a03fd
 80066c4:	3feec709 	.word	0x3feec709
 80066c8:	145b01f5 	.word	0x145b01f5
 80066cc:	be3e2fe0 	.word	0xbe3e2fe0
 80066d0:	43400000 	.word	0x43400000
 80066d4:	0003988e 	.word	0x0003988e
 80066d8:	000bb679 	.word	0x000bb679
 80066dc:	08006d90 	.word	0x08006d90
 80066e0:	3ff00000 	.word	0x3ff00000
 80066e4:	40080000 	.word	0x40080000
 80066e8:	08006db0 	.word	0x08006db0
 80066ec:	08006da0 	.word	0x08006da0
 80066f0:	a39b      	add	r3, pc, #620	; (adr r3, 8006960 <__ieee754_pow+0x9b0>)
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	4640      	mov	r0, r8
 80066f8:	4649      	mov	r1, r9
 80066fa:	f7f9 fd2f 	bl	800015c <__adddf3>
 80066fe:	4622      	mov	r2, r4
 8006700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006704:	462b      	mov	r3, r5
 8006706:	4650      	mov	r0, sl
 8006708:	4639      	mov	r1, r7
 800670a:	f7f9 fd25 	bl	8000158 <__aeabi_dsub>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006716:	f7fa f967 	bl	80009e8 <__aeabi_dcmpgt>
 800671a:	2800      	cmp	r0, #0
 800671c:	f47f ae0d 	bne.w	800633a <__ieee754_pow+0x38a>
 8006720:	4aa3      	ldr	r2, [pc, #652]	; (80069b0 <__ieee754_pow+0xa00>)
 8006722:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006726:	4293      	cmp	r3, r2
 8006728:	f340 8103 	ble.w	8006932 <__ieee754_pow+0x982>
 800672c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006730:	2000      	movs	r0, #0
 8006732:	151b      	asrs	r3, r3, #20
 8006734:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006738:	fa4a f303 	asr.w	r3, sl, r3
 800673c:	4433      	add	r3, r6
 800673e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006742:	4f9c      	ldr	r7, [pc, #624]	; (80069b4 <__ieee754_pow+0xa04>)
 8006744:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006748:	4117      	asrs	r7, r2
 800674a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800674e:	ea23 0107 	bic.w	r1, r3, r7
 8006752:	f1c2 0214 	rsb	r2, r2, #20
 8006756:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800675a:	fa4a fa02 	asr.w	sl, sl, r2
 800675e:	2e00      	cmp	r6, #0
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	bfb8      	it	lt
 800676a:	f1ca 0a00 	rsblt	sl, sl, #0
 800676e:	f7f9 fcf3 	bl	8000158 <__aeabi_dsub>
 8006772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	f7f9 fced 	bl	800015c <__adddf3>
 8006782:	a379      	add	r3, pc, #484	; (adr r3, 8006968 <__ieee754_pow+0x9b8>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	2000      	movs	r0, #0
 800678a:	460d      	mov	r5, r1
 800678c:	4604      	mov	r4, r0
 800678e:	f7f9 fe9b 	bl	80004c8 <__aeabi_dmul>
 8006792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	f7f9 fcdb 	bl	8000158 <__aeabi_dsub>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4640      	mov	r0, r8
 80067a8:	4649      	mov	r1, r9
 80067aa:	f7f9 fcd5 	bl	8000158 <__aeabi_dsub>
 80067ae:	a370      	add	r3, pc, #448	; (adr r3, 8006970 <__ieee754_pow+0x9c0>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7f9 fe88 	bl	80004c8 <__aeabi_dmul>
 80067b8:	a36f      	add	r3, pc, #444	; (adr r3, 8006978 <__ieee754_pow+0x9c8>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	4680      	mov	r8, r0
 80067c0:	4689      	mov	r9, r1
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7f9 fe7f 	bl	80004c8 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7f9 fcc3 	bl	800015c <__adddf3>
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7f9 fcbb 	bl	800015c <__adddf3>
 80067e6:	4632      	mov	r2, r6
 80067e8:	463b      	mov	r3, r7
 80067ea:	4680      	mov	r8, r0
 80067ec:	4689      	mov	r9, r1
 80067ee:	f7f9 fcb3 	bl	8000158 <__aeabi_dsub>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4620      	mov	r0, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	f7f9 fcad 	bl	8000158 <__aeabi_dsub>
 80067fe:	4642      	mov	r2, r8
 8006800:	4606      	mov	r6, r0
 8006802:	460f      	mov	r7, r1
 8006804:	464b      	mov	r3, r9
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7f9 fe5d 	bl	80004c8 <__aeabi_dmul>
 800680e:	a35c      	add	r3, pc, #368	; (adr r3, 8006980 <__ieee754_pow+0x9d0>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	f7f9 fe56 	bl	80004c8 <__aeabi_dmul>
 800681c:	a35a      	add	r3, pc, #360	; (adr r3, 8006988 <__ieee754_pow+0x9d8>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fc99 	bl	8000158 <__aeabi_dsub>
 8006826:	4622      	mov	r2, r4
 8006828:	462b      	mov	r3, r5
 800682a:	f7f9 fe4d 	bl	80004c8 <__aeabi_dmul>
 800682e:	a358      	add	r3, pc, #352	; (adr r3, 8006990 <__ieee754_pow+0x9e0>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 fc92 	bl	800015c <__adddf3>
 8006838:	4622      	mov	r2, r4
 800683a:	462b      	mov	r3, r5
 800683c:	f7f9 fe44 	bl	80004c8 <__aeabi_dmul>
 8006840:	a355      	add	r3, pc, #340	; (adr r3, 8006998 <__ieee754_pow+0x9e8>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fc87 	bl	8000158 <__aeabi_dsub>
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	f7f9 fe3b 	bl	80004c8 <__aeabi_dmul>
 8006852:	a353      	add	r3, pc, #332	; (adr r3, 80069a0 <__ieee754_pow+0x9f0>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f7f9 fc80 	bl	800015c <__adddf3>
 800685c:	4622      	mov	r2, r4
 800685e:	462b      	mov	r3, r5
 8006860:	f7f9 fe32 	bl	80004c8 <__aeabi_dmul>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7f9 fc74 	bl	8000158 <__aeabi_dsub>
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4640      	mov	r0, r8
 800687a:	4649      	mov	r1, r9
 800687c:	f7f9 fe24 	bl	80004c8 <__aeabi_dmul>
 8006880:	2200      	movs	r2, #0
 8006882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7f9 fc63 	bl	8000158 <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800689a:	f7f9 ff3f 	bl	800071c <__aeabi_ddiv>
 800689e:	4632      	mov	r2, r6
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	463b      	mov	r3, r7
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fe0d 	bl	80004c8 <__aeabi_dmul>
 80068ae:	4632      	mov	r2, r6
 80068b0:	463b      	mov	r3, r7
 80068b2:	f7f9 fc53 	bl	800015c <__adddf3>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	f7f9 fc4b 	bl	8000158 <__aeabi_dsub>
 80068c2:	4642      	mov	r2, r8
 80068c4:	464b      	mov	r3, r9
 80068c6:	f7f9 fc47 	bl	8000158 <__aeabi_dsub>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	2000      	movs	r0, #0
 80068d0:	4939      	ldr	r1, [pc, #228]	; (80069b8 <__ieee754_pow+0xa08>)
 80068d2:	f7f9 fc41 	bl	8000158 <__aeabi_dsub>
 80068d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80068da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80068de:	da2b      	bge.n	8006938 <__ieee754_pow+0x988>
 80068e0:	4652      	mov	r2, sl
 80068e2:	f000 f9b9 	bl	8006c58 <scalbn>
 80068e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ea:	f7ff bbf6 	b.w	80060da <__ieee754_pow+0x12a>
 80068ee:	4b33      	ldr	r3, [pc, #204]	; (80069bc <__ieee754_pow+0xa0c>)
 80068f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80068f4:	429f      	cmp	r7, r3
 80068f6:	f77f af13 	ble.w	8006720 <__ieee754_pow+0x770>
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <__ieee754_pow+0xa10>)
 80068fc:	440b      	add	r3, r1
 80068fe:	4303      	orrs	r3, r0
 8006900:	d00b      	beq.n	800691a <__ieee754_pow+0x96a>
 8006902:	a329      	add	r3, pc, #164	; (adr r3, 80069a8 <__ieee754_pow+0x9f8>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800690c:	f7f9 fddc 	bl	80004c8 <__aeabi_dmul>
 8006910:	a325      	add	r3, pc, #148	; (adr r3, 80069a8 <__ieee754_pow+0x9f8>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7ff bbe0 	b.w	80060da <__ieee754_pow+0x12a>
 800691a:	4622      	mov	r2, r4
 800691c:	462b      	mov	r3, r5
 800691e:	f7f9 fc1b 	bl	8000158 <__aeabi_dsub>
 8006922:	4642      	mov	r2, r8
 8006924:	464b      	mov	r3, r9
 8006926:	f7fa f855 	bl	80009d4 <__aeabi_dcmpge>
 800692a:	2800      	cmp	r0, #0
 800692c:	f43f aef8 	beq.w	8006720 <__ieee754_pow+0x770>
 8006930:	e7e7      	b.n	8006902 <__ieee754_pow+0x952>
 8006932:	f04f 0a00 	mov.w	sl, #0
 8006936:	e71e      	b.n	8006776 <__ieee754_pow+0x7c6>
 8006938:	4621      	mov	r1, r4
 800693a:	e7d4      	b.n	80068e6 <__ieee754_pow+0x936>
 800693c:	f04f 0b00 	mov.w	fp, #0
 8006940:	f8df c074 	ldr.w	ip, [pc, #116]	; 80069b8 <__ieee754_pow+0xa08>
 8006944:	f7ff bb95 	b.w	8006072 <__ieee754_pow+0xc2>
 8006948:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800694c:	f7ff bb91 	b.w	8006072 <__ieee754_pow+0xc2>
 8006950:	4638      	mov	r0, r7
 8006952:	4641      	mov	r1, r8
 8006954:	f7ff bbc3 	b.w	80060de <__ieee754_pow+0x12e>
 8006958:	9200      	str	r2, [sp, #0]
 800695a:	f7ff bb9f 	b.w	800609c <__ieee754_pow+0xec>
 800695e:	bf00      	nop
 8006960:	652b82fe 	.word	0x652b82fe
 8006964:	3c971547 	.word	0x3c971547
 8006968:	00000000 	.word	0x00000000
 800696c:	3fe62e43 	.word	0x3fe62e43
 8006970:	fefa39ef 	.word	0xfefa39ef
 8006974:	3fe62e42 	.word	0x3fe62e42
 8006978:	0ca86c39 	.word	0x0ca86c39
 800697c:	be205c61 	.word	0xbe205c61
 8006980:	72bea4d0 	.word	0x72bea4d0
 8006984:	3e663769 	.word	0x3e663769
 8006988:	c5d26bf1 	.word	0xc5d26bf1
 800698c:	3ebbbd41 	.word	0x3ebbbd41
 8006990:	af25de2c 	.word	0xaf25de2c
 8006994:	3f11566a 	.word	0x3f11566a
 8006998:	16bebd93 	.word	0x16bebd93
 800699c:	3f66c16c 	.word	0x3f66c16c
 80069a0:	5555553e 	.word	0x5555553e
 80069a4:	3fc55555 	.word	0x3fc55555
 80069a8:	c2f8f359 	.word	0xc2f8f359
 80069ac:	01a56e1f 	.word	0x01a56e1f
 80069b0:	3fe00000 	.word	0x3fe00000
 80069b4:	000fffff 	.word	0x000fffff
 80069b8:	3ff00000 	.word	0x3ff00000
 80069bc:	4090cbff 	.word	0x4090cbff
 80069c0:	3f6f3400 	.word	0x3f6f3400

080069c4 <__ieee754_sqrt>:
 80069c4:	4b54      	ldr	r3, [pc, #336]	; (8006b18 <__ieee754_sqrt+0x154>)
 80069c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ca:	438b      	bics	r3, r1
 80069cc:	4606      	mov	r6, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	460a      	mov	r2, r1
 80069d2:	460c      	mov	r4, r1
 80069d4:	d10f      	bne.n	80069f6 <__ieee754_sqrt+0x32>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	f7f9 fd75 	bl	80004c8 <__aeabi_dmul>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4630      	mov	r0, r6
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7f9 fbb9 	bl	800015c <__adddf3>
 80069ea:	4606      	mov	r6, r0
 80069ec:	460d      	mov	r5, r1
 80069ee:	4630      	mov	r0, r6
 80069f0:	4629      	mov	r1, r5
 80069f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f6:	2900      	cmp	r1, #0
 80069f8:	4607      	mov	r7, r0
 80069fa:	4603      	mov	r3, r0
 80069fc:	dc0e      	bgt.n	8006a1c <__ieee754_sqrt+0x58>
 80069fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006a02:	ea5c 0707 	orrs.w	r7, ip, r7
 8006a06:	d0f2      	beq.n	80069ee <__ieee754_sqrt+0x2a>
 8006a08:	b141      	cbz	r1, 8006a1c <__ieee754_sqrt+0x58>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	f7f9 fba3 	bl	8000158 <__aeabi_dsub>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	f7f9 fe81 	bl	800071c <__aeabi_ddiv>
 8006a1a:	e7e6      	b.n	80069ea <__ieee754_sqrt+0x26>
 8006a1c:	1512      	asrs	r2, r2, #20
 8006a1e:	d074      	beq.n	8006b0a <__ieee754_sqrt+0x146>
 8006a20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006a24:	07d5      	lsls	r5, r2, #31
 8006a26:	f04f 0500 	mov.w	r5, #0
 8006a2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a2e:	bf48      	it	mi
 8006a30:	0fd9      	lsrmi	r1, r3, #31
 8006a32:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006a36:	bf44      	itt	mi
 8006a38:	005b      	lslmi	r3, r3, #1
 8006a3a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006a3e:	1051      	asrs	r1, r2, #1
 8006a40:	0fda      	lsrs	r2, r3, #31
 8006a42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006a46:	4628      	mov	r0, r5
 8006a48:	2216      	movs	r2, #22
 8006a4a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	1987      	adds	r7, r0, r6
 8006a52:	42a7      	cmp	r7, r4
 8006a54:	bfde      	ittt	le
 8006a56:	19b8      	addle	r0, r7, r6
 8006a58:	1be4      	suble	r4, r4, r7
 8006a5a:	19ad      	addle	r5, r5, r6
 8006a5c:	0fdf      	lsrs	r7, r3, #31
 8006a5e:	3a01      	subs	r2, #1
 8006a60:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006a64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a6c:	d1f0      	bne.n	8006a50 <__ieee754_sqrt+0x8c>
 8006a6e:	f04f 0c20 	mov.w	ip, #32
 8006a72:	4696      	mov	lr, r2
 8006a74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006a78:	4284      	cmp	r4, r0
 8006a7a:	eb06 070e 	add.w	r7, r6, lr
 8006a7e:	dc02      	bgt.n	8006a86 <__ieee754_sqrt+0xc2>
 8006a80:	d112      	bne.n	8006aa8 <__ieee754_sqrt+0xe4>
 8006a82:	429f      	cmp	r7, r3
 8006a84:	d810      	bhi.n	8006aa8 <__ieee754_sqrt+0xe4>
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	eb07 0e06 	add.w	lr, r7, r6
 8006a8c:	da42      	bge.n	8006b14 <__ieee754_sqrt+0x150>
 8006a8e:	f1be 0f00 	cmp.w	lr, #0
 8006a92:	db3f      	blt.n	8006b14 <__ieee754_sqrt+0x150>
 8006a94:	f100 0801 	add.w	r8, r0, #1
 8006a98:	1a24      	subs	r4, r4, r0
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	429f      	cmp	r7, r3
 8006a9e:	bf88      	it	hi
 8006aa0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006aa4:	1bdb      	subs	r3, r3, r7
 8006aa6:	4432      	add	r2, r6
 8006aa8:	0064      	lsls	r4, r4, #1
 8006aaa:	f1bc 0c01 	subs.w	ip, ip, #1
 8006aae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006ab2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006aba:	d1dd      	bne.n	8006a78 <__ieee754_sqrt+0xb4>
 8006abc:	4323      	orrs	r3, r4
 8006abe:	d006      	beq.n	8006ace <__ieee754_sqrt+0x10a>
 8006ac0:	1c54      	adds	r4, r2, #1
 8006ac2:	bf0b      	itete	eq
 8006ac4:	4662      	moveq	r2, ip
 8006ac6:	3201      	addne	r2, #1
 8006ac8:	3501      	addeq	r5, #1
 8006aca:	f022 0201 	bicne.w	r2, r2, #1
 8006ace:	106b      	asrs	r3, r5, #1
 8006ad0:	0852      	lsrs	r2, r2, #1
 8006ad2:	07e8      	lsls	r0, r5, #31
 8006ad4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006ad8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006adc:	bf48      	it	mi
 8006ade:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006ae2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006ae6:	4616      	mov	r6, r2
 8006ae8:	e781      	b.n	80069ee <__ieee754_sqrt+0x2a>
 8006aea:	0adc      	lsrs	r4, r3, #11
 8006aec:	3915      	subs	r1, #21
 8006aee:	055b      	lsls	r3, r3, #21
 8006af0:	2c00      	cmp	r4, #0
 8006af2:	d0fa      	beq.n	8006aea <__ieee754_sqrt+0x126>
 8006af4:	02e6      	lsls	r6, r4, #11
 8006af6:	d50a      	bpl.n	8006b0e <__ieee754_sqrt+0x14a>
 8006af8:	f1c2 0020 	rsb	r0, r2, #32
 8006afc:	fa23 f000 	lsr.w	r0, r3, r0
 8006b00:	1e55      	subs	r5, r2, #1
 8006b02:	4093      	lsls	r3, r2
 8006b04:	4304      	orrs	r4, r0
 8006b06:	1b4a      	subs	r2, r1, r5
 8006b08:	e78a      	b.n	8006a20 <__ieee754_sqrt+0x5c>
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	e7f0      	b.n	8006af0 <__ieee754_sqrt+0x12c>
 8006b0e:	0064      	lsls	r4, r4, #1
 8006b10:	3201      	adds	r2, #1
 8006b12:	e7ef      	b.n	8006af4 <__ieee754_sqrt+0x130>
 8006b14:	4680      	mov	r8, r0
 8006b16:	e7bf      	b.n	8006a98 <__ieee754_sqrt+0xd4>
 8006b18:	7ff00000 	.word	0x7ff00000

08006b1c <fabs>:
 8006b1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b20:	4619      	mov	r1, r3
 8006b22:	4770      	bx	lr

08006b24 <finite>:
 8006b24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006b28:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006b2c:	0fc0      	lsrs	r0, r0, #31
 8006b2e:	4770      	bx	lr

08006b30 <matherr>:
 8006b30:	2000      	movs	r0, #0
 8006b32:	4770      	bx	lr

08006b34 <nan>:
 8006b34:	2000      	movs	r0, #0
 8006b36:	4901      	ldr	r1, [pc, #4]	; (8006b3c <nan+0x8>)
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	7ff80000 	.word	0x7ff80000

08006b40 <rint>:
 8006b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b46:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8006b4a:	f1bc 0f13 	cmp.w	ip, #19
 8006b4e:	4604      	mov	r4, r0
 8006b50:	460d      	mov	r5, r1
 8006b52:	460b      	mov	r3, r1
 8006b54:	4606      	mov	r6, r0
 8006b56:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8006b5a:	dc5a      	bgt.n	8006c12 <rint+0xd2>
 8006b5c:	f1bc 0f00 	cmp.w	ip, #0
 8006b60:	da2b      	bge.n	8006bba <rint+0x7a>
 8006b62:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006b66:	4302      	orrs	r2, r0
 8006b68:	d023      	beq.n	8006bb2 <rint+0x72>
 8006b6a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006b6e:	4302      	orrs	r2, r0
 8006b70:	4256      	negs	r6, r2
 8006b72:	4316      	orrs	r6, r2
 8006b74:	0c4b      	lsrs	r3, r1, #17
 8006b76:	0b36      	lsrs	r6, r6, #12
 8006b78:	4934      	ldr	r1, [pc, #208]	; (8006c4c <rint+0x10c>)
 8006b7a:	045b      	lsls	r3, r3, #17
 8006b7c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006b80:	ea46 0503 	orr.w	r5, r6, r3
 8006b84:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006b88:	4602      	mov	r2, r0
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006b90:	4620      	mov	r0, r4
 8006b92:	4629      	mov	r1, r5
 8006b94:	f7f9 fae2 	bl	800015c <__adddf3>
 8006b98:	e9cd 0100 	strd	r0, r1, [sp]
 8006b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	f7f9 fad8 	bl	8000158 <__aeabi_dsub>
 8006ba8:	4604      	mov	r4, r0
 8006baa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bae:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	b003      	add	sp, #12
 8006bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bba:	4a25      	ldr	r2, [pc, #148]	; (8006c50 <rint+0x110>)
 8006bbc:	fa42 f20c 	asr.w	r2, r2, ip
 8006bc0:	4011      	ands	r1, r2
 8006bc2:	4301      	orrs	r1, r0
 8006bc4:	d0f5      	beq.n	8006bb2 <rint+0x72>
 8006bc6:	0852      	lsrs	r2, r2, #1
 8006bc8:	ea05 0102 	and.w	r1, r5, r2
 8006bcc:	ea50 0601 	orrs.w	r6, r0, r1
 8006bd0:	d00c      	beq.n	8006bec <rint+0xac>
 8006bd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006bd6:	f1bc 0f13 	cmp.w	ip, #19
 8006bda:	bf0c      	ite	eq
 8006bdc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006be0:	2600      	movne	r6, #0
 8006be2:	ea25 0202 	bic.w	r2, r5, r2
 8006be6:	fa43 f30c 	asr.w	r3, r3, ip
 8006bea:	4313      	orrs	r3, r2
 8006bec:	4917      	ldr	r1, [pc, #92]	; (8006c4c <rint+0x10c>)
 8006bee:	4632      	mov	r2, r6
 8006bf0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8006bf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 faae 	bl	800015c <__adddf3>
 8006c00:	e9cd 0100 	strd	r0, r1, [sp]
 8006c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c08:	4622      	mov	r2, r4
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	f7f9 faa4 	bl	8000158 <__aeabi_dsub>
 8006c10:	e008      	b.n	8006c24 <rint+0xe4>
 8006c12:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8006c16:	dd08      	ble.n	8006c2a <rint+0xea>
 8006c18:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8006c1c:	d1c9      	bne.n	8006bb2 <rint+0x72>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f7f9 fa9c 	bl	800015c <__adddf3>
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	e7c3      	b.n	8006bb2 <rint+0x72>
 8006c2a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8006c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c32:	40ca      	lsrs	r2, r1
 8006c34:	4210      	tst	r0, r2
 8006c36:	d0bc      	beq.n	8006bb2 <rint+0x72>
 8006c38:	0852      	lsrs	r2, r2, #1
 8006c3a:	4210      	tst	r0, r2
 8006c3c:	bf1f      	itttt	ne
 8006c3e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8006c42:	ea20 0202 	bicne.w	r2, r0, r2
 8006c46:	410e      	asrne	r6, r1
 8006c48:	4316      	orrne	r6, r2
 8006c4a:	e7cf      	b.n	8006bec <rint+0xac>
 8006c4c:	08006dc0 	.word	0x08006dc0
 8006c50:	000fffff 	.word	0x000fffff
 8006c54:	00000000 	.word	0x00000000

08006c58 <scalbn>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	4616      	mov	r6, r2
 8006c5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	460b      	mov	r3, r1
 8006c66:	b982      	cbnz	r2, 8006c8a <scalbn+0x32>
 8006c68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c6c:	4303      	orrs	r3, r0
 8006c6e:	d034      	beq.n	8006cda <scalbn+0x82>
 8006c70:	4b2d      	ldr	r3, [pc, #180]	; (8006d28 <scalbn+0xd0>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f7f9 fc28 	bl	80004c8 <__aeabi_dmul>
 8006c78:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <scalbn+0xd4>)
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	429e      	cmp	r6, r3
 8006c7e:	460d      	mov	r5, r1
 8006c80:	da0d      	bge.n	8006c9e <scalbn+0x46>
 8006c82:	a325      	add	r3, pc, #148	; (adr r3, 8006d18 <scalbn+0xc0>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	e01c      	b.n	8006cc4 <scalbn+0x6c>
 8006c8a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006c8e:	42ba      	cmp	r2, r7
 8006c90:	d109      	bne.n	8006ca6 <scalbn+0x4e>
 8006c92:	4602      	mov	r2, r0
 8006c94:	f7f9 fa62 	bl	800015c <__adddf3>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	e01d      	b.n	8006cda <scalbn+0x82>
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ca4:	3a36      	subs	r2, #54	; 0x36
 8006ca6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006caa:	4432      	add	r2, r6
 8006cac:	428a      	cmp	r2, r1
 8006cae:	dd0c      	ble.n	8006cca <scalbn+0x72>
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	a11a      	add	r1, pc, #104	; (adr r1, 8006d20 <scalbn+0xc8>)
 8006cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cba:	f000 f83b 	bl	8006d34 <copysign>
 8006cbe:	a318      	add	r3, pc, #96	; (adr r3, 8006d20 <scalbn+0xc8>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fc00 	bl	80004c8 <__aeabi_dmul>
 8006cc8:	e7e6      	b.n	8006c98 <scalbn+0x40>
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	dd08      	ble.n	8006ce0 <scalbn+0x88>
 8006cce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cd6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ce4:	da0b      	bge.n	8006cfe <scalbn+0xa6>
 8006ce6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006cea:	429e      	cmp	r6, r3
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	dce0      	bgt.n	8006cb4 <scalbn+0x5c>
 8006cf2:	a109      	add	r1, pc, #36	; (adr r1, 8006d18 <scalbn+0xc0>)
 8006cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf8:	f000 f81c 	bl	8006d34 <copysign>
 8006cfc:	e7c1      	b.n	8006c82 <scalbn+0x2a>
 8006cfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d02:	3236      	adds	r2, #54	; 0x36
 8006d04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	2200      	movs	r2, #0
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <scalbn+0xd8>)
 8006d14:	e7d6      	b.n	8006cc4 <scalbn+0x6c>
 8006d16:	bf00      	nop
 8006d18:	c2f8f359 	.word	0xc2f8f359
 8006d1c:	01a56e1f 	.word	0x01a56e1f
 8006d20:	8800759c 	.word	0x8800759c
 8006d24:	7e37e43c 	.word	0x7e37e43c
 8006d28:	43500000 	.word	0x43500000
 8006d2c:	ffff3cb0 	.word	0xffff3cb0
 8006d30:	3c900000 	.word	0x3c900000

08006d34 <copysign>:
 8006d34:	b530      	push	{r4, r5, lr}
 8006d36:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3e:	ea42 0503 	orr.w	r5, r2, r3
 8006d42:	4629      	mov	r1, r5
 8006d44:	bd30      	pop	{r4, r5, pc}
	...

08006d48 <_init>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr

08006d54 <_fini>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr
